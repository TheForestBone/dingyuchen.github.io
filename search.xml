<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>研一下学期</title>
      <link href="/2023/03/21/%E7%A0%94%E4%B8%80%E4%B8%8B%E5%AD%A6%E6%9C%9F/"/>
      <url>/2023/03/21/%E7%A0%94%E4%B8%80%E4%B8%8B%E5%AD%A6%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>忙项目忙项目忙项目忙项目忙项目忙项目忙项目忙项目忙项目忙项目忙项目忙项目忙项目忙项目忙项目</p><p>没空学习没空学习没空学习没空学习没空学习没空学习没空学习没空学习没空学习没空学习没空学习没空学习</p><p>想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼</p><p>想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼想跳楼</p><p>😂</p><p>目前确立一些任务吧</p><ul><li>每天坚持背30-50个单词，先争取闲暇时间把雅思过了</li><li>机器学习和深度学习</li><li>测度论和随机分析</li><li>锻炼身体</li></ul>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于csv文件转为python列表出现NaN值的解决方法</title>
      <link href="/2023/02/20/%E5%85%B3%E4%BA%8Ecsv%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BApython%E5%88%97%E8%A1%A8%E5%87%BA%E7%8E%B0NaN%E5%80%BC%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2023/02/20/%E5%85%B3%E4%BA%8Ecsv%E6%96%87%E4%BB%B6%E8%BD%AC%E4%B8%BApython%E5%88%97%E8%A1%A8%E5%87%BA%E7%8E%B0NaN%E5%80%BC%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<p>这篇博客写于自己在学习算法心血来潮之时，历经一下午的鏖战，终于解决了一个很基础的问题，不禁感叹，学识往往不在于高，而在于深。</p><p>首先问题的提出是在我研究某算法时，期望将数据导入Jupyter进行分析，后来发现导入结果出现很多NaN值，大致如下：</p><table><thead><tr><th>First</th><th>Seconed</th><th>Third</th></tr></thead><tbody><tr><td>a</td><td>b</td><td>v</td></tr><tr><td>c</td><td>a</td><td>NaN</td></tr><tr><td>b</td><td>d</td><td>a</td></tr><tr><td>a</td><td>NaN</td><td>NaN</td></tr></tbody></table><p>首先如果从excel中导出该csv文件，会是一个DataFrame，而DataFrame是不允许随意去掉NaN的，除非你用插值或者线性拟合去替换NaN，如果要进行具体算法就必须转换为list格式。</p><p>接下来考虑list的其他函数方法，例如del，remove。</p><ul><li>del函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list[1,2,NaN]</span><br><span class="line"></span><br><span class="line">del list(1)  #意为去掉list中第2位的元素</span><br></pre></td></tr></table></figure><p>首先在这里我们就可以认为del函数无法做到我们的要求了，因为我们无法精确知道每一个NaN函数的位置。</p><p>我们再尝试remove函数</p><ul><li>remove函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">list[1,2,NaN]</span><br><span class="line"></span><br><span class="line">list.remove(NaN)  #这一步同样会报错！！</span><br></pre></td></tr></table></figure><p>为什么这一步会报错呢？原因就在于NaN作为一个特殊的float型数据，其值不等于任何其他数（甚至不等于他自己！），也就说NaN != NaN。而remove函数只能根据具体值来锁定位置，也就是说我们可以删除1,2（因为值确定）但是NaN是没有值得，也可以认为是虚无值。</p><p>那么我们就排除掉根据定值，定位置在list中去掉该元素的方法。</p><p>既然单独找NaN找不到，我们就可以反其道而行之，不打坏的，只挑好的就行了！</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">import numpy as np  #导入环境包</span><br><span class="line"></span><br><span class="line">df = pd.read_csv('...')  #读入数据集</span><br><span class="line">print(type(df))  #结果为DataFrame</span><br><span class="line"></span><br><span class="line">df = df.values  </span><br><span class="line">df = df.tolist()  #这一步将DataFrame变为list，先取出实际值变为np.array,再变为list</span><br></pre></td></tr></table></figure><p>最重要的一步：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for i in range(len(df)):  #将嵌套列表的每一个小表单独拎出来</span><br><span class="line">    df[i]=list(m for m in df[i] if m == m)  #这一步将列表中的nan全部去掉，如果该元素值等于自身就留下，</span><br><span class="line">    不等于就删掉（就是针对NaN），这样也避免使用np.isnan。</span><br></pre></td></tr></table></figure><p>结果如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[['a', 'b', 'c'],</span><br><span class="line"> ['a', 'v', 'b'],</span><br><span class="line"> ['b', 'z'],</span><br><span class="line"> ['c', 'v', 'a'],</span><br><span class="line"> ['a', 'b'],</span><br><span class="line"> ['v']]</span><br></pre></td></tr></table></figure><p>简直完美！</p>]]></content>
      
      
      <categories>
          
          <category> python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于jupyter如何导出PDF的简短教程</title>
      <link href="/2023/01/08/%E5%85%B3%E4%BA%8Ejupyter%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BAPDF%E7%9A%84%E7%AE%80%E7%9F%AD%E6%95%99%E7%A8%8B/"/>
      <url>/2023/01/08/%E5%85%B3%E4%BA%8Ejupyter%E5%A6%82%E4%BD%95%E5%AF%BC%E5%87%BAPDF%E7%9A%84%E7%AE%80%E7%9F%AD%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>在此应秦康翔同学的提议，写下jupyter导出PDF的一份简短教程。首先假设你的电脑已经安装了jupyter。那么你还需要做如下工作：</p><ul><li>安装MiKTex</li><li>修改tex文件</li><li>使用命令行编译</li></ul><h2 id="安装MikTex">安装MikTex</h2><p>其安装地址在<a href="https://miktex.org/download">这里</a>。点击进入后根据你的操作系统选择Download即可，然后一路next（可以更改安装位置，不一定在C盘）</p><p>MiKTex作为一种tex语言发行系统，只包含最基本的部件，只有200多M，而同为tex发行系统的Tex Live大得多，大概是5个G。MiKTex的理念就是，需要什么部件到时候再下，不用我就不下。</p><p>值得庆幸的是你不需要完全掌握LaTex语言就可以利用MiKTex编译jupyter的PDF文件。</p><p>安装完成后，打开你的jupyter要编译的文件：<img src="https://s2.loli.net/2023/01/08/dhayI2ZBWxCcHMD.png" alt="pdf.png">点击LaTeX即可。</p><p>如果出现404页面，请将你的latex添加到环境变量中，具体添加步骤参考<a href="https://blog.csdn.net/qq_34159047/article/details/122548290">这里</a></p><p>之后在此进行打印就会提示你安装一些包，依次安装即可。</p><h2 id="修改tex文件">修改tex文件</h2><p>第一步我们会输出一个tex文件压缩包，但是此时我们编译会出现各种各样的问题，例如中文不兼容和换行问题等等。这是我们就需要解压后修改tex文件，打开你输出的tex文件，在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\documentclass{article}</span><br></pre></td></tr></table></figure><p>之后加入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">\usepackage{fontspec, xunicode, xltxtra}</span><br><span class="line">\setmainfont{Microsoft YaHei}</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果最后输出还是有误，请在最后一行补上\usepackage{ctex}。</p><h2 id="用命令行编译">用命令行编译</h2><p>打开命令行，定位到你tex文件的位置，右键点击空白处，打开命令行（或者叫在终端中打开），输入：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">xelatex yourNotebookName.tex</span><br></pre></td></tr></table></figure><p>此处把yourNotebookName更改为你自己的tex文件名</p><p>最后他会在tex原文件夹生成一份pdf，就是你想要的最终版，排版较为美观，比word一步步粘贴舒服多了。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>研究生期间学习规划</title>
      <link href="/2023/01/04/%E7%A0%94%E7%A9%B6%E7%94%9F%E6%9C%9F%E9%97%B4%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/"/>
      <url>/2023/01/04/%E7%A0%94%E7%A9%B6%E7%94%9F%E6%9C%9F%E9%97%B4%E5%AD%A6%E4%B9%A0%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="4bd98301324c5e3f5a4112afedde9365deedcf5b505aed71c2dd64d09a82f557">2bf04a52ad34bd380c30450f79521e128589fb9ecb9e12aa844484d2e0a99e3f5c5217e41dba0193e2b2e8c7d08664686a9b06c9a030ca71ebf3359409cad466318c2bb2c95acd161179a171bc68e9dc372fff0146efc558ad567857ed02a02b1f95405dd6a6ef05e97b172ac712c8d06267e71615704c48fe82a94ba32b58c12c99745c35078adae3a63b38af5901a7352ca1091599676739763d321b2d631dc8ac74fbeca445b80ccc3dd295d933c40b0bfa1cb8d19d36636bf6024d491839fe19f620f105a44c133121b4aed19c8efacc3228c69aa907281bc84ff751630ffe8273d08a3ec8398e42e7689d1fcf470cf0e20aaaf5ea473429d0a4c7bb55d8583dccd25bd8985b6027f4083b3eddd6840bd836d66fdecd5c32867ac61078b3607ab51ae9b506444e1c735a494c1cc4072b1aedbc489df21b3865c3bf42c32b99e9fa78dcc9ac7b4fd498806ca2ff5c6887269692b2648389a8f322b669e333036fe509df37a9cd95a76b734a6890409da9fb1a0ed4bd014eacc9530ef10e83de5138fefb10d46bba4db8486f265d37d6cf94eb8d89db2f2d22c7a86009289fd36790b510799f9da4fe66c4750239980d34181c580ae2311b7087c46cb86d953f4d495d62628446ba9b716f261e227e124e6b7ee0aa7e0ddee1e5d8819678b68450975bfcfd8d3a008bf020a3511694fc4ac38071931e628e57e4594d5ad60f64abe25868ca28572a38eedc9b761b355ff9b04fb526a3dc12ca8c91f34fa89ae81c1bfdc10c290963d5b6d492de8cbc732ae37e386b0c6d6671b00f15ca8934848071e14edab27a7df61ae58982e8a3c460263f404c9edf8a81629997cdb9385aeb2b5843428b5990d76ee76f111a10fd9ee5533b9b81e538a6f327e7ae8e0a30939b118081564e564043d7bdcd892e1aa7cd032bc7c5d241c925df5d4c10c454b205330e53bcf5a1a09f7094303ef678e61f7d62ee77aa1f4585ca941eca76b96847084c6313d1e07ea8d74e78086c8138bae61667e2fc2bd6362bdbe44dece8e8fa4be4d728937a11525edc5c4dc741c12ddf41dfbb7aba8b5f1b0900aa3e86e317baeb3d04c6d598027d221312b2d249f39113312d786dcc214fe8edaee79be1a509c0f8800feb6cd830cf7bdb5874dd0be0ce627ded5caced83d62d52dd090f4af6e53a49bdf58757e1a7e79233666c48d9abf174412a236d378bc670f9201a7b7d5962b09346937c6aaed10e677f22e0210907ffd24422148d4cf6f5bb81b2ce793a14ad942e709af4678dad5296e22001d5a9fdb592ded8834f9853f637ba6df46e4a93377d76d1e47048493d1e0587826e75aa901500c24ffaf9b9a45e1ec1d8e0c8d85ada64ce539ccb8d95f3eceed2b48468afab84f8c98b9bdd47a6290e93510da44b77a1636bf51cbbafa1afcfdffc403dfcbd81670738afec8bed9b04cfc398f6de07323dfaf23224b8b4c21fc72985c3774c1d3312bcd40082ba9ade8a2defe03f03f2a67c4d4551e58a05c6ba3a3638c569e4da864adf2fcbb07c15ce9d0879a9a4254262abb3c6f78c9e2ec9fc5c40d57342dfe15e2efb8478b5e54df70ee5ae7869c053468e6b1f862584a38d60fe1427e0b88acbe404624c284d2c51ebdaae18a1be1b421f3b0127ee470a52bc1700fe37b72157ea8b241bc4a4db8c9b8ae98892ae75ef054fef9c725f20fabc91d5f4b3d1f3eaf40768</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">这部分你得输密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 学习 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>文件分享</title>
      <link href="/2023/01/02/%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB/"/>
      <url>/2023/01/02/%E6%96%87%E4%BB%B6%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="泰坦尼克号的逻辑回归分析源代码">泰坦尼克号的逻辑回归分析源代码</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">链接：https://pan.baidu.com/s/18dQlSLf6I3U7IXhTvYUvrA?pwd=f4pd </span><br><span class="line">提取码：f4pd</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 文件分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>泰坦尼克号数据的简单逻辑回归预测</title>
      <link href="/2022/11/26/%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%80%E5%8D%95%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E9%A2%84%E6%B5%8B/"/>
      <url>/2022/11/26/%E6%B3%B0%E5%9D%A6%E5%B0%BC%E5%85%8B%E5%8F%B7%E6%95%B0%E6%8D%AE%E7%9A%84%E7%AE%80%E5%8D%95%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<p>该部分文件在一些重要文件分享中</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 逻辑回归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何安装GPU版的PyTorch</title>
      <link href="/2022/11/22/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85GPU%E7%89%88%E7%9A%84Pytorch/"/>
      <url>/2022/11/22/%E5%A6%82%E4%BD%95%E5%AE%89%E8%A3%85GPU%E7%89%88%E7%9A%84Pytorch/</url>
      
        <content type="html"><![CDATA[<p>在本节内容讲解之前，先提几个前提。</p><p>前提是，有部分同学电脑上存在如下几个问题：</p><ul><li>电脑无法使用GPU</li><li>GPU无法在Pytorch中调用</li></ul><h1>第一个问题</h1><p>第一个问题的检验方法是在cmd中使用如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvidia-smi</span><br></pre></td></tr></table></figure><p>如果在jupyter中使用，在前方加上感叹号即可，注意是英文。</p><p>如果你的结果如下</p><p><img src="https://s2.loli.net/2022/11/22/L9DUmtxnPi6BXqI.png" alt="GPU.jpg"></p><p>证明你的电脑可以使用GPU，接下来我们再次验证该GPU是否可以在Pytorch中使用（在python中）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">torch.cuda.device_count()</span><br><span class="line">#output</span><br><span class="line">#1</span><br></pre></td></tr></table></figure><p>输出的结果就是你电脑的GPU数量（也可以观察第一步输出的内容）</p><p>如果你发现第一步根本没有输出，那么你需要下载一个nvidia显卡驱动，网址在<a href="https://www.nvidia.cn/">这里</a>，如果你的电脑使用AMD显卡，则找到AMD官网即可，点击官网右上角的驱动程序，选择相对应的打开即可。</p><p>那么我们如何确定我们电脑的显卡是英伟达还是AMD呢？方法如下：</p><ul><li>在windows搜索栏搜索<strong>设备管理器</strong></li><li>找到<strong>显示适配器</strong>，点击展开</li></ul><p>然后你就可以看到自己的显卡，在官网找到相应的驱动程序。</p><p>所谓驱动程序就是指硬件和系统的桥梁，也就是说相当于一个翻译官，比如你运行一个游戏或者一个模型训练，即使你的显卡效果优越，但如果没有一个合适的翻译，系统仍然不知道你在干什么。驱动的升级意味着能更好的发挥你显卡的功能。😄</p><p>注：显卡由GPU，显存等等组成，GPU是显卡的组成部分。</p><h1>第二个问题</h1><p>如果你的torch.cuda.device_count()输出结果为零，那么可能你没有下载支持GPU的Pytorch和对应的cuda。</p><h2 id="下载cuda">下载cuda</h2><p>CUDA 是 NVIDIA 发明的一种并行计算平台和编程模型。它通过利用图形处理器 (GPU) 的处理能力，可大幅提升计算性能。</p><p>目前为止基于 CUDA 的 GPU 销量已达数以百万计，软件开发商、科学家以及研究人员正在各个领域中运用 CUDA，其中包括图像与视频处理、计算生物学和化学、流体力学模拟、CT 图像再现、地震分析以及光线追踪等等。</p><p>他的下载网址在<a href="https://developer.nvidia.com/cuda-downloads">这里</a></p><p>下载Version是11的exe(local)即可。</p><p>此外，顺便一提，CUDA和Pytroch(GPU)以及显卡之间都有比较繁琐的对应关系，这部分也是比较折磨的，我的建议是都下载最新版本的。如果确实不行，再去仔细研究适当降低版本。</p><h2 id="什么是cuDNN">什么是cuDNN</h2><p>CUDA看作是一个工作台，上面配有很多工具，如锤子、螺丝刀等。cuDNN是基于CUDA的深度学习GPU加速库，有了它才能在GPU上完成深度学习的计算。它就相当于工作的工具，比如它就是个扳手。</p><p>但是CUDA这个工作台买来的时候，并没有送扳手。想要在CUDA上运行深度神经网络，就要安装cuDNN，就像你想要拧个螺帽就要把扳手买回来。这样才能使GPU进行深度神经网络的工作，工作速度相较CPU快很多。</p><h2 id="配置环境变量">配置环境变量</h2><ul><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\cudnn\bin</li><li>C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v11.3\extras\CUPTI\lib64</li></ul><p>最好一路默认安装CUDA，这样会安装到C盘，运行速度会更快一些，如果你安装到其他盘，请将以上目录适当更改，然后，将以上目录添加到环境变量中即可。</p><p>环境变量更改上一节课已经讲过，如果不会可以私聊我。</p><h2 id="下载GPU版本的Pytroch和Pytorchvision">下载GPU版本的Pytroch和Pytorchvision</h2><p>具体的镜像网站在<a href="https://download.pytorch.org/whl/torch_stable.html">这里</a></p><p>之后根据以下三个信息定位你要下载的内容：</p><ul><li>cuda的版本</li><li>python的版本</li><li>你的系统</li></ul><p>比如cu101/torchvision-0.5.0-cp38-cp38-win_amd64.whl。</p><p>如果你的cuda和python都是最新，只需要下载最新的即可。</p><p>最后一步使用cmd的命令，设你的下载目录为x，则在cmd中使用如下命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install torch 'x'</span><br></pre></td></tr></table></figure><p>注意，需要下载两个whl文件。</p><p><strong>以上下载和pip install都是在某一个环境中使用的，如果你想要在jupyter中使用，请参考我之前的文章进行环境注入</strong></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> GPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>期货和证券</title>
      <link href="/2022/11/11/%E6%9C%9F%E8%B4%A7%E5%92%8C%E8%AF%81%E5%88%B8/"/>
      <url>/2022/11/11/%E6%9C%9F%E8%B4%A7%E5%92%8C%E8%AF%81%E5%88%B8/</url>
      
        <content type="html"><![CDATA[<h1>期货</h1><p>英文是Futures，期货不是货物，而是以某种事物为标的标准化可交易合约。</p><p>主要有以下两种：</p><ul><li>某种大型产品，例如棉花，大豆，豆油等。</li><li>某种金融资产，例如股票，债券。</li></ul><p>总结来看，其标物可以为商品或者金融工具。</p><p><strong>交收期货的日期</strong>可以是一星期，一个月，三个月甚至更多。</p><p>买卖期货的合同或者协议称之为<strong>期货合约</strong></p><p>买卖期货的场所称为之<strong>期货市场</strong></p><ul><li><p><strong>本人的理解</strong>对于期货的深刻理解必须要从其历史谈起，最初的期货交易（现货远期交易）是指双方口头承诺在某一时间交收一定数量的产品，后来这种口头约定被买卖契约替代。</p></li><li><p><strong>合约</strong>本质上规定了交易一定数量或者质量的物品的标准化合约，一般由期货交易所制定。</p></li><li><p><strong>期货手续费</strong>相当于股票佣金，但相对于股票的费用（印花税，佣金等等）种类之多，期货只有一个手续费。</p></li></ul><h2 id="保证金">保证金</h2><ul><li><strong>初始保证金</strong>初始保证金是指交易者刚开仓时（刚刚开户准备投钱时）需要缴纳的资金，根据交易额和保证金比率确定。有：</li></ul><center>初始保证金=交易金额*调整保证金比率（此比率不断浮动）<center><ul><li><strong>追加保证金</strong>这一部分建议通过例子（来源百度）来理解：</li><li>小丁今天以2700元/吨的价格买入5手（一手10吨）的大豆期货合约，交易所的大豆保证金比率为5%。那么小丁一共要交6750（2700<em>50</em>10*5%）元初始保证金（这部分和买入价格一起交）。</li><li>后来大豆跌了！跌倒了2600，那么小丁血亏5000元，这时候他的账面金额是6750+2600*50，注意，保证金不会在当日立刻扣除，而是只在交易日关闭的时候进行运算，保证金6750-亏损金额5000&lt;最低保证金限额。就需要补交，如果不交的话，交易所会强制卖掉你的几手期货来补足自己。</li></ul></center></center>]]></content>
      
      
      <categories>
          
          <category> 金融 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 金融 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>试讲</title>
      <link href="/2022/10/10/%E8%AF%95%E8%AE%B2/"/>
      <url>/2022/10/10/%E8%AF%95%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<center>在你开始学习之前，首先要想清楚自己是为什么而学。<p>请一定给自己一个足够说服你行动的理由。</p></center><span id="more"></span><h1>随机变量序列的两种收敛性</h1><p>随机变量序列的收敛性有两种：</p><ul><li>依概率收敛（大数定律有所涉及）</li><li>按分布收敛（中心极限定律有所涉及）</li></ul><p>这两种收敛在概率论和数理统计中都有广泛应用，应当深度掌握。</p><h2 id="依概率收敛">依概率收敛</h2><p>在理解依概率收敛的定义之前，我们必须解释‘概率是频率的稳定值’的含义：对于不合格品概率<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>和检查得到的不合格品率：<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="8.792ex" height="4.701ex" role="img" focusable="false" viewBox="0 -1381 3886.1 2078"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1270,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2325.8,0)"><g data-mml-node="msub" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(480.1,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1320.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container>频率序列{<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.245ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 992.3 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>}有如下两种现象：</p><ol><li>频率<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.245ex" height="1.359ex" role="img" focusable="false" viewBox="0 -443 992.3 600.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>对概率<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.138ex" height="1.439ex" role="img" focusable="false" viewBox="0 -442 503 636"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>的<strong>绝对偏差</strong>|<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="6.149ex" height="1.758ex" role="img" focusable="false" viewBox="0 -583 2717.7 777"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1214.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2214.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>|会随<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>增大而呈现逐渐减小的趋势，但不能说完全收敛于零。</li><li><strong>绝对偏差</strong>|<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="6.149ex" height="1.758ex" role="img" focusable="false" viewBox="0 -583 2717.7 777"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1214.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2214.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g></g></g></svg></mjx-container>|时大时小，但随着n的不断增大，较大偏差发生的可能性越来越小。</li></ol><p>如果对于任意的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.09ex;" xmlns="http://www.w3.org/2000/svg" width="5.203ex" height="1.597ex" role="img" focusable="false" viewBox="0 -666 2299.6 706"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g><g data-mml-node="mo" transform="translate(743.8,0)"><path data-c="3E" d="M84 520Q84 528 88 533T96 539L99 540Q106 540 253 471T544 334L687 265Q694 260 694 250T687 235Q685 233 395 96L107 -40H101Q83 -38 83 -20Q83 -19 83 -17Q82 -10 98 -1Q117 9 248 71Q326 108 378 132L626 250L378 368Q90 504 86 509Q84 513 84 520Z"></path></g><g data-mml-node="mn" transform="translate(1799.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container>,事件<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.564ex;" xmlns="http://www.w3.org/2000/svg" width="11.478ex" height="2.26ex" role="img" focusable="false" viewBox="0 -749.5 5073.3 999"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="msub" transform="translate(278,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1492.5,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2492.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(2995.7,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(3551.5,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mi" transform="translate(4607.3,0)"><path data-c="1D700" d="M190 -22Q124 -22 76 11T27 107Q27 174 97 232L107 239L99 248Q76 273 76 304Q76 364 144 408T290 452H302Q360 452 405 421Q428 405 428 392Q428 381 417 369T391 356Q382 356 371 365T338 383T283 392Q217 392 167 368T116 308Q116 289 133 272Q142 263 145 262T157 264Q188 278 238 278H243Q308 278 308 247Q308 206 223 206Q177 206 142 219L132 212Q68 169 68 112Q68 39 201 39Q253 39 286 49T328 72T345 94T362 105Q376 103 376 88Q376 79 365 62T334 26T275 -8T190 -22Z"></path></g></g></g></g></svg></mjx-container>我们用如下公式来表达大偏差发生的事件：<mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="8.792ex" height="4.701ex" role="img" focusable="false" viewBox="0 -1381 3886.1 2078"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mi" transform="translate(518,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mo" transform="translate(1270,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2325.8,0)"><g data-mml-node="msub" transform="translate(220,676)"><g data-mml-node="mi"><path data-c="1D446" d="M308 24Q367 24 416 76T466 197Q466 260 414 284Q308 311 278 321T236 341Q176 383 176 462Q176 523 208 573T273 648Q302 673 343 688T407 704H418H425Q521 704 564 640Q565 640 577 653T603 682T623 704Q624 704 627 704T632 705Q645 705 645 698T617 577T585 459T569 456Q549 456 549 465Q549 471 550 475Q550 478 551 494T553 520Q553 554 544 579T526 616T501 641Q465 662 419 662Q362 662 313 616T263 510Q263 480 278 458T319 427Q323 425 389 408T456 390Q490 379 522 342T554 242Q554 216 546 186Q541 164 528 137T492 78T426 18T332 -20Q320 -22 298 -22Q199 -22 144 33L134 44L106 13Q83 -14 78 -18T65 -22Q52 -22 52 -14Q52 -11 110 221Q112 227 130 227H143Q149 221 149 216Q149 214 148 207T144 186T142 153Q144 114 160 87T203 47T255 29T308 24Z"></path></g><g data-mml-node="mi" transform="translate(646,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g><g data-mml-node="mi" transform="translate(480.1,-686)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><rect width="1320.3" height="60" x="120" y="220"></rect></g></g></g></svg></mjx-container></p>]]></content>
      
      
      <categories>
          
          <category> 432统计学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 应用统计 考研 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-3日记</title>
      <link href="/2022/10/04/6-3%E9%9A%8F%E6%83%B3/"/>
      <url>/2022/10/04/6-3%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>越深入了解Python，越感受到Excel的优越之处。真正的牛逼不是你能写出多眼花缭乱的代码，而是你能做出什么东西。或许我该找时间好好学习一下Excel？</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Coding不支持静态网页托管的态度</title>
      <link href="/2022/10/04/Coding%E4%B8%8D%E6%94%AF%E6%8C%81%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%89%98%E7%AE%A1/"/>
      <url>/2022/10/04/Coding%E4%B8%8D%E6%94%AF%E6%8C%81%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E6%89%98%E7%AE%A1/</url>
      
        <content type="html"><![CDATA[<p>不开心😒</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Coding </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫练习</title>
      <link href="/2022/10/04/Python%E7%88%AC%E8%99%AB%E7%BB%83%E4%B9%A0/"/>
      <url>/2022/10/04/Python%E7%88%AC%E8%99%AB%E7%BB%83%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="对于网页的理解：">对于网页的理解：</h2><p>网页一般由三部分组成，分别是 HTML(超文本标记语言)、CSS(层叠样式表)和 JScript(活动脚本语言)。如果用人体来比喻，HTML 是人的骨架，并且定义了人的嘴巴、眼睛、耳朵等要长在哪里。CSS 是人的外观细节，如嘴巴长什么样子，眼睛是双眼皮还是单眼皮，是大眼睛还是小眼睛，皮肤是黑色的还是白色的等。JScript 表示人的技能，例如跳舞、唱歌或者演奏乐器等。</p><h2 id="HTML的基本构成：">HTML的基本构成：</h2><blockquote><p>&lt;html&gt;…&lt;/html&gt; 是网页的根元素&lt;head&gt;…&lt;/head&gt; 元素包含了文档的元(meta)数据，如 &lt;meta charset=“utf-8”&gt; 定义网页编码格式为 utf-8。&lt;title&gt;…&lt;title&gt; 元素描述了文档的标题&lt;body&gt;…&lt;/body&gt; 表示用户可见的内容&lt;div&gt;…&lt;/div&gt; 表示框架&lt;p&gt;…&lt;/p&gt; 表示段落&lt;ul&gt;…&lt;/ul&gt; 定义无序列表&lt;ol&gt;…&lt;/ol&gt;定义有序列表&lt;li&gt;…&lt;/li&gt;表示列表项&lt;img src=“” alt=“”&gt;表示图片&lt;h1&gt;…&lt;/h1&gt;表示标题&lt;a href=“”&gt;…&lt;/a&gt;表示超链接</p></blockquote><h2 id="爬虫的基本步骤：">爬虫的基本步骤：</h2><blockquote><p>先由 urllib 模块的 request 方法打开 URL 得到网页 HTML 对象。使用浏览器打开网页源代码分析网页结构以及元素节点。通过 Beautiful Soup 或则正则表达式提取数据。存储数据到本地磁盘或数据库。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-5日记</title>
      <link href="/2022/10/04/6-5%E9%9A%8F%E6%83%B3/"/>
      <url>/2022/10/04/6-5%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>随着年龄的增长越来越在意身体的重要性(有种步入中老年的感觉)，以后如果能健健康康的生活，一个人也应该很幸福吧。不过还是应该开始锻炼身体了。早上起来慢跑几圈应该也蛮不错的，而且学习的阵地应该转移到图书馆了，宿舍的环境实在让我有些不适，空调的空气也非常难闻。最近要联系石玉峰教授，不知道石老师会不会收我，久仰大名，老天保佑。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown的一些注解</title>
      <link href="/2022/10/04/Markdown%E7%9A%84html%E6%B3%A8%E8%A7%A3/"/>
      <url>/2022/10/04/Markdown%E7%9A%84html%E6%B3%A8%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>Markdown中对html的引用(html不参与编译过程，只是单纯的展示)：例如对于&lt;li&gt;…&lt;li&gt;进行展示，只需要对源文件中的&lt;前加上\即可。因为Markdown文件对于&gt;没有特殊歧义。如果要对大量html文件进行展示，在vscode中进行ctrl+F，ctrl+alt+enter全部查找和替换即可。最后效果如下：</p><blockquote><p>&lt;html&gt;…&lt;/html&gt; 是网页的根元素&lt;head&gt;…&lt;/head&gt; 元素包含了文档的元(meta)数据</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown的相对目录引用</title>
      <link href="/2022/10/04/Markdown%E7%9A%84%E7%9B%B8%E5%AF%B9%E7%9B%AE%E5%BD%95%E5%BC%95%E7%94%A8/"/>
      <url>/2022/10/04/Markdown%E7%9A%84%E7%9B%B8%E5%AF%B9%E7%9B%AE%E5%BD%95%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>Markdown的绝对目录引用可以去图床，各类图床可以在知乎上找到。分为付费和免费两种。Markdown的相对目录是从你引用图片的目录开始，按级别搜索，往上一级搜索是./，往下一级搜索是直接写/filename(你的文件夹名)。</p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python的列表，元组，集合和词典</title>
      <link href="/2022/10/04/Python%E7%9A%84%E9%9B%86%E5%90%88%EF%BC%8C%E5%85%83%E7%BB%84%E7%AD%89/"/>
      <url>/2022/10/04/Python%E7%9A%84%E9%9B%86%E5%90%88%EF%BC%8C%E5%85%83%E7%BB%84%E7%AD%89/</url>
      
        <content type="html"><![CDATA[<p>早前接触过Python的时候就被这些定义搞得含混不清，但是不理解的事物会一直成为一个绊脚石。今天下定决心要将这些知识彻底搞懂吸收，故在此写下知识要点。</p><span id="more"></span><p>1.列表（List）是一种有序和可更改的集合。允许重复的成员。2.元组（Tuple）是一种有序且不可更改的集合。允许重复的成员。3.集合（Set）是一个无序和无索引的集合。没有重复的成员。4.词典（Dictionary）是一个无序，可变和有索引的集合。没有重复的成员。</p><h2 id="列表">列表</h2><h3 id="创建和索引">创建和索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">mylist = [<span class="string">'fuck'</span>,<span class="string">'this'</span>,<span class="string">'shit'</span>]</span><br><span class="line"><span class="built_in">print</span>(mylist) <span class="comment">#创建</span></span><br><span class="line"><span class="built_in">print</span>(mylist[1]) <span class="comment">#第一个元素序号是0</span></span><br><span class="line"><span class="built_in">print</span>(mylist[2:5]) <span class="comment">#索引范围</span></span><br><span class="line">mylist[1] = <span class="string">'you'</span> <span class="comment">#更改某一项</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> mylist:</span><br><span class="line">  <span class="built_in">print</span>(x) <span class="comment">#遍历列表</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">'shit'</span> <span class="keyword">in</span> mylist:</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">'Oh,yeah!'</span>)</span><br><span class="line">mylist.append(<span class="string">'she'</span>) <span class="comment">#追加项目</span></span><br><span class="line">mylist.insert(2,<span class="string">'bloody'</span>) <span class="comment">#插入项目</span></span><br><span class="line">mylist.remove(<span class="string">'fuck'</span>) <span class="comment">#删除指定项目</span></span><br><span class="line">del mylist[0] <span class="comment">#按索引删除，不加索引即删除整个列表</span></span><br><span class="line">mylist.clear() <span class="comment">#清空列表</span></span><br></pre></td></tr></table></figure><h3 id="复制列表">复制列表</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copylist = mylist.copy()</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">copylist = list(mylist)</span><br></pre></td></tr></table></figure><h3 id="合并列表">合并列表</h3><p>最简单的方式是使用+，如：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list3 = list1 + list2</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">list1.extend(list2)</span><br></pre></td></tr></table></figure><p>总结：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>append()</td><td>在列表的末尾添加一个元素</td></tr><tr><td>clear()</td><td>删除列表中的所有元素</td></tr><tr><td>copy()</td><td>返回列表的副本</td></tr><tr><td>count()</td><td>返回具有指定值的元素数量。</td></tr><tr><td>extend()</td><td>将列表元素（或任何可迭代的元素）添加到当前列表的末尾</td></tr><tr><td>index()</td><td>返回具有指定值的第一个元素的索引</td></tr><tr><td>insert()</td><td>在指定位置添加元素</td></tr><tr><td>pop()</td><td>删除指定位置的元素</td></tr><tr><td>remove()</td><td>删除具有指定值的项目</td></tr><tr><td>reverse()</td><td>颠倒列表的顺序</td></tr><tr><td>sort()</td><td>对列表进行排序</td></tr></tbody></table><h2 id="元组">元组</h2><h3 id="创建和索引-2">创建和索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mytuple = (<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'cherry'</span>)</span><br><span class="line"><span class="built_in">print</span>(mytuple[1]) <span class="comment">#与列表类似</span></span><br></pre></td></tr></table></figure><h3 id="更改元组值">更改元组值</h3><p>需要将元组更改为列表：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = (<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'cherry'</span>)</span><br><span class="line">y = list(x)</span><br><span class="line">y[1] = <span class="string">'kiwi'</span> <span class="comment">#转化为列表之后更改</span></span><br><span class="line">x = tuple(y)  <span class="comment">#转化回元组</span></span><br></pre></td></tr></table></figure><p>如果只需要创建有一个项目的元组，即单项元组，需要在之后加上逗号：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mytuple = (<span class="string">'apple'</span>,)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(mytuple))</span><br></pre></td></tr></table></figure><h4 id="注意：">注意：</h4><p>我们无法删除元组的项目，但是可以删除整个元组，使用del。</p><h2 id="集合">集合</h2><h3 id="创建与索引">创建与索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myset = {<span class="string">'apple'</span>,<span class="string">'banana'</span>,<span class="string">'pear'</span>}</span><br></pre></td></tr></table></figure><p>集合是无序的</p><h3 id="添加项目">添加项目</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">myset.add(<span class="string">'orange'</span>) <span class="comment">#单个项目</span></span><br><span class="line">myset.update([<span class="string">'orange'</span>,<span class="string">'mango'</span>])</span><br></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>add()</td><td>向集合添加元素。</td></tr><tr><td>clear()</td><td>删除集合中的所有元素。</td></tr><tr><td>copy()</td><td>返回集合的副本。</td></tr><tr><td>difference()</td><td>返回包含两个或更多集合之间差异的集合。</td></tr><tr><td>difference_update()</td><td>删除此集合中也包含在另一个指定集合中的项目。</td></tr><tr><td>discard()</td><td>删除指定项目。</td></tr><tr><td>intersection()</td><td>返回为两个其他集合的交集的集合。</td></tr><tr><td>intersection_update()</td><td>删除此集合中不存在于其他指定集合中的项目。</td></tr><tr><td>isdisjoint()</td><td>返回两个集合是否有交集。</td></tr><tr><td>issubset()</td><td>返回另一个集合是否包含此集合。</td></tr><tr><td>issuperset()</td><td>返回此集合是否包含另一个集合。</td></tr><tr><td>pop()</td><td>从集合中删除一个元素。</td></tr><tr><td>remove()</td><td>删除指定元素。</td></tr><tr><td>symmetric_difference()</td><td>返回具有两组集合的对称差集的集合。</td></tr><tr><td>symmetric_difference_update()</td><td>插入此集合和另一个集合的对称差集。</td></tr><tr><td>union()</td><td>返回包含集合并集的集合。</td></tr><tr><td>update()</td><td>用此集合和其他集合的并集来更新集合。</td></tr></tbody></table><h2 id="字典">字典</h2><h3 id="创建与索引-2">创建与索引</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mydict ={</span><br><span class="line">  <span class="string">"brand"</span>: <span class="string">"Porsche"</span>,</span><br><span class="line">  <span class="string">"model"</span>: <span class="string">"911"</span>,</span><br><span class="line">  <span class="string">"year"</span>: 1963</span><br><span class="line">}</span><br><span class="line"><span class="built_in">print</span>(mydict)</span><br><span class="line">x = mydict[<span class="string">"model"</span>]</span><br><span class="line">x = mydict.get(<span class="string">"model"</span>)  <span class="comment">#获取某个键对应的值</span></span><br></pre></td></tr></table></figure><h3 id="字典的嵌套">字典的嵌套</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">child1 = {</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Phoebe Adele"</span>,</span><br><span class="line">  <span class="string">"year"</span> : 2002</span><br><span class="line">}</span><br><span class="line">child2 = {</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Jennifer Katharine"</span>,</span><br><span class="line">  <span class="string">"year"</span> : 1996</span><br><span class="line">}</span><br><span class="line">child3 = {</span><br><span class="line">  <span class="string">"name"</span> : <span class="string">"Rory John"</span>,</span><br><span class="line">  <span class="string">"year"</span> : 1999</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myfamily = {</span><br><span class="line">  <span class="string">"child1"</span> : child1,</span><br><span class="line">  <span class="string">"child2"</span> : child2,</span><br><span class="line">  <span class="string">"child3"</span> : child3</span><br><span class="line">}</span><br></pre></td></tr></table></figure><table><thead><tr><th>clear()</th><th>删除字典中的所有元素</th></tr></thead><tbody><tr><td>copy()</td><td>返回字典的副本</td></tr><tr><td>fromkeys()</td><td>返回拥有指定键和值的字典</td></tr><tr><td>get()</td><td>返回指定键的值</td></tr><tr><td>items()</td><td>返回包含每个键值对的元组的列表</td></tr><tr><td>keys()</td><td>返回包含字典键的列表</td></tr><tr><td>pop()</td><td>删除拥有指定键的元素</td></tr><tr><td>popitem()</td><td>删除最后插入的键值对</td></tr><tr><td>setdefault()</td><td>返回指定键的值。如果该键不存在，则插入具有指定值的键。</td></tr><tr><td>update()</td><td>使用指定的键值对字典进行更新</td></tr><tr><td>values()</td><td>返回字典中所有值的列表</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些我喜欢的美剧分享</title>
      <link href="/2022/10/04/%E4%B8%80%E4%BA%9B%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84%E7%BE%8E%E5%89%A7/"/>
      <url>/2022/10/04/%E4%B8%80%E4%BA%9B%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84%E7%BE%8E%E5%89%A7/</url>
      
        <content type="html"><![CDATA[<p>恶搞之家，机器鸡以及间谍亚契等美剧你可以在<a href="https://mdsub.tk/mdunofficial/feaa315d17a640108aed34bf3c6dac4e">这里</a>找到。这是一家我很喜欢的字幕组。关于辛普森与美国老爹，Rick&amp;Morty等剧你可以在爱美剧或者PDD上找到相关资源，由于爱美剧的IP地址经常连接缓慢，我建议在PDD上购买或者通过正规渠道NetFlix(如果你可以Cross the wall的话)。</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 美剧 </tag>
            
            <tag> 恶搞之家 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>书摘-富爸爸穷爸爸</title>
      <link href="/2022/10/04/%E4%B9%A6%E6%91%98-%E7%A9%B7%E7%88%B8%E7%88%B8%E5%AF%8C%E7%88%B8%E7%88%B8/"/>
      <url>/2022/10/04/%E4%B9%A6%E6%91%98-%E7%A9%B7%E7%88%B8%E7%88%B8%E5%AF%8C%E7%88%B8%E7%88%B8/</url>
      
        <content type="html"><![CDATA[<p>富爸爸说，他们没有被钱收买，这是好事。大部分人却做不到这样，因为他们的人生被恐惧和贪婪控制。没钱的恐惧促使他们努力工作，得到酬劳后，贪婪又让他们想拥有所有用钱能买到的东西。这使他们需要更多的钱，也让他们花更多的钱。这就是富爸爸所说的“老鼠赛跑”。</p><span id="more"></span><blockquote><p>如果你们能看到一个机会，就注定你们会在一生中不断地发现机会。</p></blockquote><p>摘自-&lt;富爸爸穷爸爸&gt; -罗伯特·清崎</p>]]></content>
      
      
      <categories>
          
          <category> 书摘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 书摘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2022/10/04/%E8%80%83%E7%A0%94%E6%84%9F%E6%83%B3/"/>
      <url>/2022/10/04/%E8%80%83%E7%A0%94%E6%84%9F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<hr><p>title: 考研感想与建议categories: 考研tags:</p><ul><li>考研top_img: /img/white_machine.pngcover: /img/chan.jpg</li></ul><hr><p>由于这是一篇经验贴，我会把个人的感情总结放在后面，你会在文章的最前面就能看到干货。</p><span id="more"></span><h2 id="报考院校与分数">报考院校与分数</h2><p>报考院校：山东大学金融研究院分数：</p><table><thead><tr><th>科目</th><th>分数</th></tr></thead><tbody><tr><td>政治</td><td>66</td></tr><tr><td>英二</td><td>82</td></tr><tr><td>432专业课</td><td>98</td></tr><tr><td>396经济学联考</td><td>121</td></tr><tr><td>总分</td><td>367</td></tr></tbody></table><p>初试排名30/38,复试排名24/30。本专业报考人数预估在140-160之间。</p><h2 id="个人基础与能力">个人基础与能力</h2><p>西南大学数学与统计学院统计系本科生，排名在37/60左右。GPA并不高，在专业并不算优等生。曾经在学生会工作，担任过辩论队副队长，参加过很多次大美赛但无果。(tips：大美赛获奖的关键或许不在你的理论模型，而在于你的可视化表达。)和我的队伍获得过一些辩论奖项，但与考研无关。</p><h2 id="考研准备工作">考研准备工作</h2><h3 id="院校和专业的确定">院校和专业的确定</h3><p>考研永远是选择大于努力的，学校的选择跟你高考时期的选择标准是一样的。我单方面认为城市的权重要大一些，其次是学校的牌子。C9或者大部分985的牌子到哪里都是响当当的，在该城市本地更是地位优越，校招时是一块香饽饽。此外关于专业，如果不是特别讨厌统计学，我的建议是不要轻易跨考。但也不是绝对，难度大一些罢了，详情可以咨询我的舍友张铂湛，他从统计学顺利跨考进入电子科技大学的计算机王牌专业。</p><h3 id="报录比和考试目录查询">报录比和考试目录查询</h3><p>不要去轻易相信百度的考研辅导机构。相关信息可以去一下网站找到：1.知乎经验贴，有的学姐会出售第一手考研资料，不过首先你要确认学姐真实身份，辅导机构一律跳过2.你要报考的学校的研究生招生网3.你要报考的学院的官网特别注意年份，有的学校会偷偷更改参考书目和考试科目，而只发一个小小的通知。(山东大学金融研究院就在2021年偷偷把数三换成了396，但这其实是统计学的一个大趋势)</p><h3 id="网课内容获取">网课内容获取</h3><p>资本主义方式：购买老师的正规网课，支持正版，价格在2000元左右。社会主义方式：拼多多购买百度网盘网课，价格在10元左右。</p><h2 id="考试各科目">考试各科目</h2><p>1.政治我用的是<strong>徐涛</strong>和<strong>肖秀荣</strong>，至于腿姐，我备考时从来没有去了解过。单方面认为跟老师只需要跟一到两个就行了，任何一个老师肯定有长处和短处，但是没必要因为老师某个板块不是那么突出而放弃他，因为就算是短板也一定比你我的基础强。肖秀荣教授的书仍然是第一首选，我的建议是当故事一样读，只需要了解大概，知道基本过程，有一个总体政治观念。其次徐涛的书显得备考性强，似乎是为了考点而出的书，优点在于实用性强，集成性强，缺点在于普适性弱，不适合想突破高分的同学。但是当你把两本书组合起来的时候，就可以根据徐涛的重点去肖秀荣的书上划知识点。取其精华，去其糟粕。</p><p>2.英语我从初中一直秉持的英语观念：当你沉浸在英语里，就会说英语了。我很喜欢接触英语，不仅体现在我网易云歌单里2000多首歌1900都是英文，更体现在我喜欢记住每一个美剧里不认识的单词。如果你想从美剧中练习英语，可以参考我博客里<a href="https://theforestbone.github.io/2022/06/04/%E4%B8%80%E4%BA%9B%E6%88%91%E5%96%9C%E6%AC%A2%E7%9A%84%E7%BE%8E%E5%89%A7/">一些我喜欢的美剧分享</a>。让自己沉浸在英语的环境中，是学习英语的诀窍，也是学习每一种语言的诀窍。如果你英语确实是短板，我建议多去了解一下美国或英国的历史，接触一下国外的信息。在中文的环境下只靠背单词是没有办法突破的。此外，背单词软件我推荐的是<strong>墨墨</strong>。</p><p>3.432专业课关于专业课，每个学校的参考书目都大不相同，有的考茆诗松有的考贾俊平，贾俊平的书更基础，所以考这本书的学校432分要高一些。茆诗松的书在于难度和深度，更难啃，但啃干净了收获也很大。我的专业课并不好，所以预估分数也不高，我们这一届由于题目难度增大，平均分从去年的130多到了今年的110多，而且今年山东大学出了一个超纲题目，15分，很多同学都没有做出来。也导致分数线下降不少。关于<strong>贾俊平</strong>的书，你可以去咨询我的老舍友郭汶朋，他今年上岸北京师范大学，专业考试的科目就是贾俊平和茆诗松的组合。关于<strong>茆诗松</strong>，我的建议是课后题一个一个啃，所有的统计学概念要记牢，但主体还是按照你们学校的大纲和往年试题来看。其他课本外的统计学基本常识要了解，比如聚类分析或者蒙特卡洛模拟。</p><p>4.396经济学联考这一部分原来是数三，但是经济学联考改革是大趋势，很多高校都率先进行了改革。也说明了统计学开始与实践接轨。396具体分为三部分：数学，逻辑与作文。1.数学部分大体内容与数三相似，不过题目难度下降了大约15%，我的建议是按照数三来复习。跟汤家凤就可以。张宇的题目难度较高，适合基础较好的同学进行再次拔高。2.逻辑部分是对于大部分同学而言崭新的区域，我跟的是<strong>赵鑫全</strong>老师，是逻辑学的老牌教师了。建议先刷题，20道逻辑题如果能对17-18个就可以先放一放，最后几个月再看一下。否则还是要跟着老师的网课走。3.作文部分分为大小作文，小作文是对一部分逻辑论证纠错，大作文是对一些时政或问题进行逻辑分析。大部分拉分差距都不在此，了解大致写作思路即可。</p><h2 id="其他">其他</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">不积跬步无以至千里，请不要把经验贴当做行动指南，任何人的经验贴都不能百分之百对他人适用。</span><br><span class="line">我本身不是那种学习的大佬，我希望你在阅读我的文章时抱着学习的态度而不是批判的眼光，智者也能从愚者身上学到乐观，况且我们都是学者。</span><br><span class="line">如果你还有想进一步与我讨论的问题，这是我的QQ：635974460。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>雅思考试相关</title>
      <link href="/2022/10/04/%E9%9B%85%E6%80%9D%E8%80%83%E8%AF%95%E7%9B%B8%E5%85%B3/"/>
      <url>/2022/10/04/%E9%9B%85%E6%80%9D%E8%80%83%E8%AF%95%E7%9B%B8%E5%85%B3/</url>
      
        <content type="html"><![CDATA[<p>最近备考雅思和驾照，在此写下雅思考试的相关注意事项。</p><span id="more"></span><h1>考试时间和内容</h1><h2 id="时间">时间</h2><p>基本上每个月的周末都可以进行考试，分为两天，一天笔试(听力，阅读和写作)，一天口语面试。<img src="https://s2.loli.net/2022/06/14/prOfEQP5Fy2IvBh.jpg" alt="考试时间示例图"></p><h2 id="内容">内容</h2><h3 id="笔试">笔试</h3><blockquote><p>听力部分：时间是40分钟，30分钟考试，10分钟答题卡阅读部分：时间是60分钟，40道题目，3-4篇文章写作考试：时间是60分钟，分为大作文小作文</p></blockquote><h3 id="口语面试">口语面试</h3><blockquote><p>分为三部分：part1:基本生活对话part2:由题目发表2分钟讲话part3:在上一节基础上深入对话(可能有变动，要随机应变)</p></blockquote><h2 id="注意事项">注意事项</h2><p>笔试仍然沿用我的老方法，背单词+做真题+研读阅读题。口语部分只能是多读多写，辅导资料不用太多，遵循极简原则，一本书吃透即可。</p>]]></content>
      
      
      <categories>
          
          <category> 雅思 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 雅思 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6-14日记</title>
      <link href="/2022/10/04/6-14%E9%9A%8F%E6%83%B3/"/>
      <url>/2022/10/04/6-14%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>还有不到一个月就要离开这个生活了四年的大学，虽然早就料到了会有悲伤涌来，但到了深夜，这种触感还是会顺着床沿开始逐渐侵扰我。</p><span id="more"></span><p>与世隔绝的四年本科生涯即将结束，要准备开始迎接新的研究生生活，人已经21岁了，跟这个社会也隔绝了21年。如果决定读博，就意味着还要再啃六七年的书，并不是不习惯读书，而是不习惯这种未知感，我读的书到底有什么用？</p><p>一方面希望自己能早点结束这种求学生活，真正步入社会，一方面又向往这种象牙塔下的单纯求知生活。人总是喜欢给两面的东西下定义，我也不例外。到头来发现，实在是无法给自己贴上固定的标签。每个人确定的标签也只有名字罢了。</p><p>可能成为不了一个科学家，可能成为不了一个商务新星，最后只能委屈的成为我自己。</p><p>划好自己的课题，不干涉别人的课题，不允许自己的课题被他人干涉，不拘泥于世俗的眼光，慢慢集中于自我的提升，至少是没有错的。</p><blockquote><p>基本上，一切人际关系矛盾都起因于对别人的课题妄加干涉或者自己的课题被别人妄加干涉。只要能够进行课题分离，人际关系就会发生巨大改变。&lt;被讨厌的勇气&gt; -岸见一郎 / 古贺史健</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中外教材对比</title>
      <link href="/2022/10/04/%E4%B8%AD%E5%A4%96%E6%95%99%E6%9D%90%E5%AF%B9%E6%AF%94/"/>
      <url>/2022/10/04/%E4%B8%AD%E5%A4%96%E6%95%99%E6%9D%90%E5%AF%B9%E6%AF%94/</url>
      
        <content type="html"><![CDATA[<p>最近在微信读书泡了好几天，感受到最深的就是中外书籍的差异。</p><span id="more"></span><p>相同类型的Python教程，国内书籍给我的感觉就是格式化，固定化，官话套话。一句话你要品很久但迟迟找不到例子加以佐证加深记忆。很多话一笔带过，一本机器学习书一千多页恨不得把所有的cs内容吃进来，以至于每一节都很浅，根本云里雾里，有时候给你扔好几页代码，这节就结束了。</p><p>国外的书像是在讲故事，他不花太长时间给你讲代码，而是带着你品历史（类似西瓜书，但是西瓜书的历史太长了），做朋友。他不在乎给你讲了多少知识，而在于你懂了多少。</p><p>另外一个小细节，国内的那些知识拼接书基本上没有？和！，也没有我们，我之类的字眼。基本上全是陈述句，就像我们的高中教材一样。</p><p>建议各位同学还是有空去阅读国外的教材和书籍，中外教育水平的差距或许比你想象中要巨大。</p><p>今天阅读了国内某拼接书，从186页直接给你塞五页代码，让你自己研究爬虫，令我苦不堪言。</p><p>希望以后的大学教材是由各位与时代接轨的同学们主编。</p>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我和涵</title>
      <link href="/2022/10/04/%E6%88%91%E5%92%8C%E6%B6%B5/"/>
      <url>/2022/10/04/%E6%88%91%E5%92%8C%E6%B6%B5/</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="91eeecf13b96a01fb416fb48ce14444c1d4ef8b013b382640a91a261feb0e499">548d34713a7f60948385b89cd77d65b1f5e3b152c3180dd0a9c3aad8c6e79bf7148cdb636cf906cbcaa81335717327c1dd5868b93f699063420f5a7dda85e45b6be8410e5a9ab7f5b170afd3a02852a7</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">You must enter the password to read.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 涵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>科目一部分知识点总结</title>
      <link href="/2022/10/04/%E7%A7%91%E7%9B%AE%E4%B8%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/"/>
      <url>/2022/10/04/%E7%A7%91%E7%9B%AE%E4%B8%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>暑假考驾照，在此写下自己的知识点总结，以缩短备考时间。</p><span id="more"></span><h2 id="技巧相关">技巧相关</h2><p>有‘不得’字眼一般都为正确。有‘依次’字眼一般都为正确。有‘可不，可以不’字眼一般为错误。不得超过一般指30公里/小时。</p><blockquote><p>对于能见度-速度-跟车距离的搭配：261-145-520(0代表在50m的可见度范围下应尽快驶离该路段)。</p></blockquote><p>站三口五，指距离公交站，加油站30米，路口50米内不能停车危险距离选最小，其他距离选最大有‘警察不可以’字眼一般为错误。</p><h2 id="逃逸处罚">逃逸处罚</h2><p>未逃逸：3年以下逃逸或情节特别恶劣：3-7年因逃逸致人死亡：7年以上</p><h2 id="醉酒处罚">醉酒处罚</h2><p>在道路上追逐竞驶，醉酒驾驶，处拘役，并处罚金。醉酒后被吊销驾证未满5年不得再次申请。血液中酒精含量为100mg/ml时，属于醉酒驾驶。</p><h2 id="驾驶证丢失补办">驾驶证丢失补办</h2><p>补办期间即使有补办证明也不得驾驶(有‘不得’字眼一般都为正确)。</p><h2 id="实况">实况</h2><p>在路口看到让牌，在路口减速后观察行人，确认安全后通过。在堵车的交叉路口绿灯亮时，也不能驶入交叉路口。前车在左转弯，掉头，超车时，后车不得超车。</p><h2 id="报废">报废</h2><p>驾驶报废车辆，处二百元以上两千元以下罚款，并吊销驾证。</p><h2 id="限速">限速</h2><p>城市道路，无中心线限速30，有中心线限速50。公路，无中心线限速40，有中心线限速70。在单条车道高速公路，车速为60-120。在两条车道高速公路，右侧车速为60-100，左侧车速为100-120。在三条车道高速公路，右侧为60-90，中间为90-110，左侧为110-120。</p><h2 id="高速故障">高速故障</h2><p>警告标志设置距离应为150米之外，普通公路则为50-150米。</p><h2 id="扣留车辆">扣留车辆</h2><p>缺少两证两标志一号牌：驾驶证，行驶证；检验合格标志，保险标志；号牌；身份证和行驶证不可以扣留。</p><h2 id="夜间">夜间</h2><p>夜间会车对向应在150米内改用近光灯</p><h2 id="特殊天气">特殊天气</h2><p>雨天不可以使用紧急制动，容易翻车(笑)。</p><h2 id="行驶优先度">行驶优先度</h2><p>右转让左转，左转让直行。</p><h2 id="超车">超车</h2><p>虚线可以跨越，实线不可跨越。</p><h2 id="交警手势">交警手势</h2><p>这个看B站讲解</p><h2 id="标志">标志</h2><p>遇到停车让行标志，必须在停止线以外停车瞭望，确认安全才可以通行。铁路上，火车头标志是无人看守，栅栏是有人看守。红色斜线一条表示50米。菱形标志是人行横道预告标识线。双黄实线表示禁止标线。</p><h2 id="罚款相关">罚款相关</h2><p>以欺骗，贿赂等取得校车驾驶资格，处2000以下罚款，三年内不得再次申请。考试中有欺骗，贿赂行为，罚款2000以下。组织参与欺骗，贿赂牟取经济利益，处三倍以上五倍经济所得以下罚款，最高不超过十万元。非法安装警报器，处200元以上2000元以下罚款。以欺骗手段补领驾驶证，处200元以上500元以下罚款。</p><h2 id="准驾车型">准驾车型</h2><p>大型客车：A1重型牵引挂车：A2中型客车：B1大型货车：B2</p><h2 id="年限相关">年限相关</h2><p>以欺骗，贿赂等取得驾驶证被吊销后，三年以内不得重新申请。考试中有欺骗，贿赂行为，一年内不得申请。</p><p>高速：小车：20-50 650 12大车： 20 6 20 12普通： 小车 20-50 3 506大车10-20 1 20 6</p>]]></content>
      
      
      <categories>
          
          <category> 驾照 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 科目一 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-14随想</title>
      <link href="/2022/10/04/9-14%E9%9A%8F%E6%83%B3/"/>
      <url>/2022/10/04/9-14%E9%9A%8F%E6%83%B3/</url>
      
        <content type="html"><![CDATA[<p>知识太多了</p><span id="more"></span><p>开始了研究生的生活，却被一种莫名的压力压的喘不过气，经过多天的总结，目前的困扰有如下几点：</p><ol><li><p>要学习的知识如此之多，任意一本书拿出来都可以够我啃上好几周，时间根本来不及而且我也没有那么强的自学能力。</p></li><li><p>方向不明确，是顺应专硕条件去实习工作，还是继续深造读博，如果要读博我的方向是什么？应该从现在准备论文吗？总之我不认为应该浑浑噩噩的走一步看一步。</p></li><li><p>是否应该发展一个自己除去学习之外的专长？是做自己个人博客还是发展自媒体？还是专注于数据分析？机器学习的海洋如此之宽旷，要兼顾学习和实习不是我一人之力可以做到的。我应该如何决定？</p></li><li><p>身体是工作之本，我应该制定一个属于自己的健康要求计划，每天注重自律，停止着眼眼前既得利益。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Matplotlib学习</title>
      <link href="/2022/10/04/Matplotlib/"/>
      <url>/2022/10/04/Matplotlib/</url>
      
        <content type="html"><![CDATA[<p>在你开始学习之前，首先要想清楚自己为什么要学。请一定给自己一个足够说服你行动的理由。</p><span id="more"></span><p>实际应用可能会用js框架而不是matplotlib，但是有助于我们进行数据理解。</p><p><strong>Matplotlib是最流行的Python底层绘图库。</strong></p><p>axis轴，指x,y的坐标轴。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode例题</title>
      <link href="/2022/10/04/LeetCode%E4%BE%8B%E9%A2%98/"/>
      <url>/2022/10/04/LeetCode%E4%BE%8B%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<p>一些LeetCode的例题</p><span id="more"></span><h1>数据结构</h1><h2 id="一堆数组的动态和">一堆数组的动态和</h2><p>给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。</p><p>请返回 nums 的动态和。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">class Solution:</span><br><span class="line">    def runningSum(self, nums: List[int]) -&gt; List[int]:</span><br><span class="line"></span><br><span class="line">        for i in range(1,len(nums)):</span><br><span class="line">            nums2 = nums</span><br><span class="line">            nums2[0] = nums[0]</span><br><span class="line">            nums2[i] = ('%s+%s'%(nums[i-1],nums[i]))</span><br><span class="line">            #nums2[i] = nums[i]+nums[i-1],一个是输出1+2，一个直接输出3</span><br><span class="line">        return(nums2)</span><br><span class="line">        print(nums2)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL学习</title>
      <link href="/2022/10/04/MySQL%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/04/MySQL%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>MySQL基本语法</p><span id="more"></span><p>SQL语句主要可以划分为以下3个类别。DDL(Data Definition Languages):数据定义语言，定义数据段，数据库，表，列，索引等DML：数据操作语言，用于添加，删除，更新数据库DCL：数据控制语句，定义用户访问权限和安全级别等等。</p><h1>DDL-数据库操作-创建&amp;查询</h1><h2 id="创建">创建</h2><p>if not exist表示如果数据库名不存在则进行操作，即使存在也不会报错。</p><ul><li>查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#查询所有数据库</span><br><span class="line">show databases;</span><br><span class="line">#查询当前数据库</span><br><span class="line">select database();</span><br></pre></td></tr></table></figure><ul><li>创建</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create database [if not exist] 数据库名 [default charset] 字符集 [collate] 排序规则;</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">drop database [if exist] 数据库名;</span><br></pre></td></tr></table></figure><ul><li>使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use 数据库名;</span><br></pre></td></tr></table></figure><h2 id="查询">查询</h2><ul><li>查询当前数据库所有的表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show tables;</span><br></pre></td></tr></table></figure><ul><li>查询表结构</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">desc 表格;</span><br></pre></td></tr></table></figure><ul><li>查询指定表的建表语句（也就是注释以及默认设置）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show create table 表名;</span><br></pre></td></tr></table></figure><h2 id="DDL-表格操作-数据类型">DDL-表格操作-数据类型</h2><p>MySQL中的数据类型主要有三类：数值类型，字符串类型，日期时间类型。</p><ul><li>数值类型<img src="https://s2.loli.net/2022/08/29/UsyoPIvmgRHdtZT.png" alt="datatype.png"></li><li>字符串类型<img src="https://s2.loli.net/2022/08/29/DfMakbVWd1Bsxli.png" alt="chartype.png"></li><li>日期时间类型<img src="https://s2.loli.net/2022/08/29/vnmKew417RpArjO.png" alt="yeartype.png"></li></ul><h2 id="DDL-表格操作-修改">DDL-表格操作-修改</h2><ul><li>添加字段</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alter table 表名 add 字段名 类型 [comment];</span><br></pre></td></tr></table></figure><p>-修改数据类型</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">#修改数据类型</span><br><span class="line">alter table 表名 modify 字段名 新数据类型；</span><br><span class="line">#修改字段名和字段类型</span><br><span class="line">alter table 表名 change 旧字段名 新字段名 类型 [comment] [约束]；</span><br><span class="line">change和modify都可以修改表的定义，不同的是change后需要写两次列名，不方便，但是change优点是可以修改列名称，modify则不能。</span><br><span class="line">#修改表名（后设表名为emp）</span><br><span class="line">alter table emp rename empl;</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#删除字段</span><br><span class="line">alter table 表名 drop 字段名;</span><br><span class="line">#删除表格</span><br><span class="line">drop table[if exists] 表名;</span><br><span class="line">#删除指定的表，并重新创建该表</span><br><span class="line">truncate table 表名；</span><br></pre></td></tr></table></figure><h2 id="DML语句">DML语句</h2><p>DML操作是指对数据库中表记录的操作，主要包括表记录的插入（insert），更新（update），删除（delete），查询（select），是开发人员日常使用<strong>最频繁</strong>的操作。</p><h2 id="MySQL常用的图形化界面">MySQL常用的图形化界面</h2><p>Sqlyog,Navicat,DataGrip.</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Numpy学习</title>
      <link href="/2022/10/04/Numpy%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/04/Numpy%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1>Numpy</h1><h2 id="应用">应用</h2><p>Numerical Python是Python的一个拓展程序库，支持大量维度数组和矩阵运算。为开放的源代码并且由许多协作者共同维护开发，其运行速度很快。Numpy通常与：</p><ul><li>Scipy（科学工程计算）</li><li>Matplotlib（绘图）</li></ul><p>一起使用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">from numpy import *#导入numpy库</span><br><span class="line"></span><br><span class="line">eye(4)#生成对角矩阵</span><br></pre></td></tr></table></figure><h2 id="Numpy的Ndarray对象">Numpy的Ndarray对象</h2><p>基本形式如下：<strong>numpy.array(object, dtype = None, copy = True, order = None, subok = False, ndmin = 0)</strong>其中：</p><ul><li>object: 要进行操作的数组</li><li>dtype: 元素的数据类型（后面会有介绍）</li><li>copy: 对象是否复制</li><li>order: 创建数组的样式，C为行方向，F为列方向，A为任意方向（默认）</li><li>subok: 默认返回一个与基类类型一致的数组</li><li>ndmin: 指定生成数组的最小维度</li></ul><h2 id="数据类型">数据类型</h2><p>Numpy的数据类型较多，具体可以在<a href="https://www.runoob.com/numpy/numpy-dtype.html">这里</a>找到</p><h2 id="数据类型对象（dtype）">数据类型对象（dtype）</h2><p>numpy.dtype描述了数据的以下方面：</p><ul><li>数据的类型（整数，浮点数）</li><li>数据大小（用多少字节去存储）</li><li>数据的字节顺序等等小端法：最小值存储在最小的地址。大端法：最重要的字节存储在最小的地址。</li></ul><p>dtype对象使用如下语法：numpy.dtype(object,align,copy)关于其的详细用法我们可以通过如下例子来解释：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">dt = np.dtype([('age',np.int8)])#规定了一个数据类型对象，可以套用在其他Ndarray上。</span><br><span class="line"></span><br><span class="line">a = np.array([(10),(20),(30)],dtype = dt)</span><br><span class="line"></span><br><span class="line">print(a['age'])</span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>结果为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[10,20,30]</span><br><span class="line">[(10),(20),(30)]</span><br></pre></td></tr></table></figure><p><em><strong>（其中的有无括号区别我也不清楚，此处存疑问老师）</strong></em>我们也可以用另一个例子来加深理解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">student = np.dtype([('name','S20'), ('age', 'i1'), ('marks', 'f4')]) </span><br><span class="line"></span><br><span class="line">a = np.array([('abc', 21, 50),('xyz', 18, 75)], dtype = student) </span><br><span class="line"></span><br><span class="line">print(a['name'].dtype)</span><br></pre></td></tr></table></figure><p>可以看到，np.dtype将三种数据属性（名称和类型）对应到了np.array上，name对应一列，age对应一列，并分别规定了类型（int8对应i1，此类i2，i3,i4乘以8即可）等等</p><h2 id="Numpy数据类型">Numpy数据类型</h2><p>Numpy数组的维数称为秩（rank），秩就是轴的数量，即数组的维度，一维数组的秩为 1，二维数组的秩为 2。在 NumPy中，每一个线性的数组称为是一个轴（axis），也就是维度（dimensions）。</p><ul><li>axis=0，表示沿着第 0 轴进行操作，即对每一列进行操作。</li><li>axis=1，表示沿着第1轴进行操作，即对每一行进行操作。</li></ul><p>一些比较重要的nadarray对象属性：</p><table><thead><tr><th style="text-align:center">属性</th><th style="text-align:center">说明</th></tr></thead><tbody><tr><td style="text-align:center">ndarray.ndim</td><td style="text-align:center">秩，即轴的数量或维度的数量</td></tr><tr><td style="text-align:center">ndarray.shape</td><td style="text-align:center">数组的维度，对于矩阵，n行m列</td></tr><tr><td style="text-align:center">ndarray.size</td><td style="text-align:center">数组元素的总个数，相当于.shape中 n*m 的值</td></tr><tr><td style="text-align:center">ndarray.dtype</td><td style="text-align:center">ndarray 对象的元素类型</td></tr><tr><td style="text-align:center">ndarray.itemsize</td><td style="text-align:center">ndarray 对象中每个元素的大小，以字节为单位</td></tr><tr><td style="text-align:center">ndarray.flags</td><td style="text-align:center">ndarray 对象的内存信息</td></tr><tr><td style="text-align:center">ndarray.real</td><td style="text-align:center">ndarray元素的实部</td></tr><tr><td style="text-align:center">ndarray.imag</td><td style="text-align:center">ndarray 元素的虚部</td></tr><tr><td style="text-align:center">ndarray.data</td><td style="text-align:center">包含实际数组元素的缓冲区，由于一般通过数组的索引获取元素，所以通常不需要使用这个属性。</td></tr></tbody></table><p>我们引用实例：</p><ul><li>ndarray.ndim</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line"></span><br><span class="line">a = np.arange(24)</span><br><span class="line"></span><br><span class="line">print(a.ndim)</span><br><span class="line"></span><br><span class="line">b = a.reshape(2,4,3) #调整其维度</span><br><span class="line"></span><br><span class="line">print(b.ndim)</span><br><span class="line"></span><br><span class="line">print(b)</span><br></pre></td></tr></table></figure><p>可自行运行，结果为两个4*3矩阵列表。</p><ul><li>ndarray.shape</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = np.array([[1,2,3],[4,5,6]])</span><br><span class="line"></span><br><span class="line">a.shape = (3,2)</span><br><span class="line"></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><p>其结果将2*3的矩阵转化为3*2</p><ul><li>ndarray.itemsizendarray.itemsize 以字节的形式返回数组中每一个元素的大小。例如，一个元素类型为 float64 的数组 itemsize 属性值为 8(float64 占用 64 个 bits，每个字节长度为 8，所以 64/8，占用 8 个字节），又如，一个元素类型为 complex32 的数组 item 属性为 4（32/8）。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 数组的 dtype 为 float64（八个字节） </span><br><span class="line"></span><br><span class="line">y = np.array([1,2,3,4,5], dtype = np.float64)  </span><br><span class="line"></span><br><span class="line">print (y.itemsize)</span><br></pre></td></tr></table></figure><p>结果为8。</p><ul><li>ndarray.flagsndarray.flags 返回 ndarray 对象的内存信息。关于内存知识没有太大学习兴趣，在此不再赘述。</li></ul><h2 id="Numpy创建数组">Numpy创建数组</h2><p>ndarray 数组除了可以使用底层 ndarray 构造器来创建外，也可以通过以下几种方式来创建。</p><ul><li>numpy.emptynumpy.empty 方法用来创建一个指定形状（shape）、数据类型（dtype）且未初始化的数组：<strong>numpy.empty(shape, dtype = float, order = ‘C’)</strong>order（c或者f）表示行优先或列优先。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = np.empty([3,2], dtype = int) </span><br><span class="line"></span><br><span class="line">print (x)</span><br></pre></td></tr></table></figure><p>结果的数组元素为随机值，未初始化。同样的用法还有</p><ul><li>numpy.zeros</li><li>numpy.ones</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Numpy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas学习</title>
      <link href="/2022/10/04/Pandas%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/04/Pandas%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>Pandas的详细笔记</p><span id="more"></span><h1>Pandas简介</h1><h2 id="应用">应用</h2><p>Pandas 可以对各种数据进行运算操作，比如归并、再成形、选择，还有数据清洗和数据加工特征。广泛应用在学术、金融、统计学等各个数据分析领域。</p><h2 id="对象">对象</h2><p>Series（一维数据）：由一组数据和一组对应的数据标签（索引）组成。DataFrame（二维数据）：表格类型，既有行索引也有列索引。</p><h1>Pandas使用</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">pd._version_#查看pandas版本</span><br><span class="line"></span><br><span class="line">mydataest = {</span><br><span class="line">    'sites':['Google','Runoob','wiki'],</span><br><span class="line">    'number':[1,2,3]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">myvar = pd.DataFrame(mydataset)</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th></th><th>sites</th><th>number</th></tr></thead><tbody><tr><td>0</td><td>google</td><td>1</td></tr><tr><td>1</td><td>Runoob</td><td>2</td></tr><tr><td>2</td><td>Wiki</td><td>3</td></tr></tbody></table><h2 id="Pandas数据结构-Series">Pandas数据结构 - Series</h2><p>Series类似于表格中的列：pandas.Series(data,index,dtype,name,copy)其中index为数据索引标签，默认从0，其中，索引值也可以自己规定：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">a = ["Google", "Runoob", "Wiki"]</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(a, index = ["x", "y", "z"])</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p>我们同样可以使用字典类型来创建Series：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">sites = {1: "Google", 2: "Runoob", 3: "Wiki"}</span><br><span class="line"></span><br><span class="line">myvar = pd.Series(sites)</span><br><span class="line"></span><br><span class="line">print(myvar)</span><br></pre></td></tr></table></figure><p>其中name用来给当前表格命名</p><h2 id="Pandas数据结构-DataFrame">Pandas数据结构 - DataFrame</h2><p>DataFrame可以看做共用一个索引的多个Series：pandas.DataFrame( data, index, columns, dtype, copy)其中index表示行标签，columns表示列标签。</p><h3 id="DataFrame的创建">DataFrame的创建</h3><ul><li>我们使用pandas语法创建：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data = [['Google',10],['Runoob',12],['Wiki',13]]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data,columns = ['Site','Age'],dtype = float)</span><br><span class="line"></span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th></th><th>Site</th><th>Age</th></tr></thead><tbody><tr><td>0</td><td>google</td><td>10.0</td></tr><tr><td>1</td><td>Runoob</td><td>12.0</td></tr><tr><td>2</td><td>Wiki</td><td>13.0</td></tr></tbody></table><ul><li>我们当然也可以使用ndarrays进行创建，如下：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data = {'Site':['Google', 'Runoob', 'Wiki'], 'Age':[10, 12, 13]}</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">print (df)</span><br></pre></td></tr></table></figure><ul><li>也可以使用字典创建（不常用）：</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data = [{'a': 1, 'b': 2},{'a': 5, 'b': 10, 'c': 20}]</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line">print (df)</span><br></pre></td></tr></table></figure><p>其中输出结果c对应的第一行结果为NaN表示没有对应数据</p><h3 id="Dataframe的索引">Dataframe的索引</h3><p>我们利用loc属性进行索引：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">data = {</span><br><span class="line">  "calories": [420, 380, 390],</span><br><span class="line">  "duration": [50, 40, 45]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"># 数据载入到 DataFrame 对象</span><br><span class="line">df = pd.DataFrame(data)</span><br><span class="line"></span><br><span class="line"># 返回第一行</span><br><span class="line">print(df.loc[0])</span><br><span class="line"></span><br><span class="line"># 返回第二行</span><br><span class="line">print(df.loc[1])</span><br><span class="line"></span><br><span class="line"># 返回第一行和第二行</span><br><span class="line">print(df.loc[[0, 1]])</span><br><span class="line"></span><br><span class="line"># 返回第一行和第二行的第一列</span><br><span class="line">print(df.iloc[[0,1],[0]])</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>其中注意loc是根据index的名称或者数字来定义，iloc则是单纯根据排序。</p><h3 id="Pandas读取CSV">Pandas读取CSV</h3><p>yourtest.csv需要预先放在工作目录下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv('yourtest.csv')</span><br><span class="line"></span><br><span class="line">print(df.to_string())</span><br><span class="line">#to_string用于返回 DataFrame 类型的数据，如果不使用该函数，则输出结果为数据的前面 5 行和末尾 5 行，中间部分以 ... 代替。</span><br><span class="line">print(df)</span><br></pre></td></tr></table></figure><p>我们也可以使用 to_csv() 方法将 DataFrame 存储为 csv 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line">   </span><br><span class="line"># 三个字段 name, site, age</span><br><span class="line">nme = ["Google", "Runoob", "Taobao", "Wiki"]</span><br><span class="line">st = ["www.google.com", "www.runoob.com", "www.taobao.com", "www.wikipedia.org"]</span><br><span class="line">ag = [90, 40, 80, 98]</span><br><span class="line">   </span><br><span class="line"># 字典</span><br><span class="line">dict = {'name': nme, 'site': st, 'age': ag}</span><br><span class="line">     </span><br><span class="line">df = pd.DataFrame(dict)</span><br><span class="line"> </span><br><span class="line"># 保存 dataframe</span><br><span class="line">df.to_csv('site.csv')</span><br></pre></td></tr></table></figure><h3 id="其他数据处理方法">其他数据处理方法</h3><ul><li>head(n):查看前n行数据，不填则默认5行。</li><li>tail(n):尾部5行。</li><li>info():返回部分信息。</li></ul><h2 id="Pandas和Json">Pandas和Json</h2><p>关于相关内容需要了解Json相关，在后文再做讨论。</p><h2 id="Pandas-数据清洗">Pandas 数据清洗</h2><p>对如下数据：<img src="https://s2.loli.net/2022/09/14/4d5SwiK6VUgMXQN.jpg" alt="datawash.jpeg">包含如下四种空数据：</p><ol><li>n/a</li><li>NA</li><li><ul><li></li></ul></li><li>na</li></ol><h3 id="清洗空值">清洗空值</h3><p>DataFrame.dropna(axis=0, how=‘any’, thresh=None, subset=None, inplace=False)</p><ul><li>axis：默认为 0，表示逢空值剔除整行，如果设置参数 axis＝1 表示逢空值去掉整列。</li><li>how：默认为 ‘any’ 如果一行（或一列）里任何一个数据有出现 NA 就去掉整行，如果设how=‘all’ 一行（或列）都是 NA 才去掉这整行。</li><li>thresh：设置需要多少非空值的数据才可以保留下来的。</li><li>subset：设置想要检查的列。如果是多个列，可以使用列名的 list 作为参数。</li><li>inplace：如果设置 True，将计算得到的值直接覆盖之前的值并返回 None，修改的是源数据。</li></ul><p><s>不一定需要全部写全参数，不加进去就不会默认执行。比如axis就不应该加，就不会一定删除某一行一列。</s></p><p>我们通过isnull()来判断单元格是否为空：print (df[‘NUM_BEDROOMS’].isnull())除此之外，我们可以指定空数据类型，比如Pandas只认为n/a，和NA为空数据，对于中文‘无’：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">missing_values = ["n/a", "na", "--",'无']</span><br><span class="line">df = pd.read_csv('property-data.csv', na_values = missing_values)</span><br><span class="line"></span><br><span class="line">print (df['NUM_BEDROOMS'])</span><br><span class="line">print (df['NUM_BEDROOMS'].isnull())</span><br></pre></td></tr></table></figure><p>一般清洗之后不会修改源数据，如果想修改，请把inplace改为True。</p><h3 id="替换空字段">替换空字段</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">df.fillna(12345,inplace = True)#替换全部空处</span><br><span class="line">df['somecolumn'].fillna(12345, inplace = True)#替换指定列</span><br></pre></td></tr></table></figure><p>通过插值替换空单元格：均值，中位数，众数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = df["ST_NUM"].mean()#以均值为例，其余median，mode类似。</span><br><span class="line"></span><br><span class="line">df["ST_NUM"].fillna(x, inplace = True)</span><br></pre></td></tr></table></figure><h3 id="Pandas-清洗错误格式数据">Pandas 清洗错误格式数据</h3><ul><li>日期可以将其格式化：如’20201226’:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line"># 第三个日期格式错误</span><br><span class="line">data = {</span><br><span class="line">  "Date": ['2020/12/01', '2020/12/02' , '20201226'],</span><br><span class="line">  "duration": [50, 40, 45]</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(data, index = ["day1", "day2", "day3"])</span><br><span class="line"></span><br><span class="line">df['Date'] = pd.to_datetime(df['Date'])</span><br><span class="line"></span><br><span class="line">print(df.to_string())</span><br></pre></td></tr></table></figure><ul><li>年龄</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">person = {</span><br><span class="line">  "name": ['Google', 'Runoob' , 'Taobao'],</span><br><span class="line">  "age": [50, 200, 12345]    </span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"></span><br><span class="line">for x in df.index:</span><br><span class="line">  if df.loc[x, "age"] &gt; 120:</span><br><span class="line">    df.loc[x, "age"] = 120#df.drop(x, inplace = True)可以将其删除 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(df.to_string())</span><br></pre></td></tr></table></figure><h3 id="Pandas-清洗重复数据">Pandas 清洗重复数据</h3><p>使用duplicated()和drop_duplicates()</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">import pandas as pd</span><br><span class="line"></span><br><span class="line">person = {</span><br><span class="line">  "name": ['Google', 'Runoob', 'Runoob', 'Taobao'],</span><br><span class="line">  "age": [50, 40, 40, 23]  </span><br><span class="line">}</span><br><span class="line">df = pd.DataFrame(person)</span><br><span class="line"></span><br><span class="line">df.drop_duplicates(inplace = True)</span><br><span class="line"></span><br><span class="line">print(df.duplicated())#返回bool值</span><br><span class="line">print(df)#返回删除后的表格</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pytorch学习</title>
      <link href="/2022/10/04/Pytorch%E5%AD%A6%E4%B9%A0/"/>
      <url>/2022/10/04/Pytorch%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<center>在你开始学习之前，首先要想清楚自己是为什么而学。<p>请一定给自己一个足够说服你行动的理由。</p></center><span id="more"></span><p><strong>在开始我的分享之前，我想回答几个自问自答的问题：</strong></p><ol><li><p>为什么要用网站分享，而不是PPT？答：这个问题我思考了很久，因为不使用PPT进行分享是不合常理的，甚至是对老师和同学不尊重的行为，但思考了很久之后我认为这个网站的存在是永久的，易于你在随时随地查看这些内容，甚至你在工作的时候需要查看某项函数的时候都可以点开看。从实用性来看，我坚持使用网站进行分享。</p></li><li><p>你的分享逻辑和原则是什么？答：你可以通过网页右侧的目录来查看我的分享大纲，其中有些部分不适合展开细讲的，我都会给出一个链接适合有需要的同学点开钻研。</p></li></ol><p><strong>我的大致分享思路如下：</strong></p><ol><li>介绍conda</li><li>介绍Jupyter</li><li>介绍Pandas，Numpy，Matplotlib</li><li>预备知识的回顾</li><li>预备知识的继续</li></ol><hr><h1>介绍conda</h1><p>Conda是一个管理版本和Python环境的工具，它使用起来非常容易。</p><p>Conda包安装之后，需要添加环境变量才可以在命令行里调用。</p><ul><li>为什么要配置环境变量？</li></ul><blockquote><p>根据Windows系统在查找可执行程序的原理，只会从当前文件夹下执行目标文件(比如SDK中的解释器，用于语言的编译)，因此只有加上环境变量，就能让操作系统方便在任何目录下都能执行目标文件。-来自CSDN博主一夜星尘</p></blockquote><p>关于环境变量的详细配置在<a href="https://blog.csdn.net/weixin_43914658/article/details/108785084">这里</a></p><ul><li>conda 创建环境</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个名为miaomiao的环境，指定Python版本是3.5</span></span><br><span class="line">conda create --name miaomiao python=<span class="number">3.5</span></span><br></pre></td></tr></table></figure><ul><li>conda 激活环境</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate miaomiao</span><br></pre></td></tr></table></figure><ul><li>conda 删除环境</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">conda remove --name miaomiao --<span class="built_in">all</span></span><br></pre></td></tr></table></figure><ul><li>conda 查看系统中所有的环境</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">conda info -e</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">base                  *  D:\study\Anaconda</span><br><span class="line">d2l                      D:\study\Anaconda\envs\d2l</span><br><span class="line">ding                     D:\study\Anaconda\envs\ding</span><br></pre></td></tr></table></figure><p><strong>Anaconda是一个免费、易于安装的包管理器、环境管理器（包含conda）和Python发行版。包含1,500多个开源包，并提供免费社区支持。</strong></p><p>关于更详尽的conda介绍在<a href="https://zhuanlan.zhihu.com/p/44398592">这里</a></p><h1>介绍Jupyter</h1><blockquote><p>Jupyter Notebook是基于网页的用于交互计算的应用程序。其可被应用于全过程计算：开发、文档编写、运行代码和展示结果。——Jupyter Notebook官方介绍</p></blockquote><p><img src="https://s2.loli.net/2022/10/02/4zHPvtRbAXa2CfN.png" alt="Z_981~LY7B_5GXD@_@_68XU.png"></p><p>-Jupyter的操作页面</p><p><strong>Jupyter Notebook以网页的形式打开，可以在网页页面中直接编写代码和运行代码，代码的运行结果也会直接在代码块下显示的程序。如在编程过程中需要编写说明文档，可在同一个页面中直接编写，便于作及时的说明和解释。</strong><img src="https://s2.loli.net/2022/09/25/sxFXKHoTIrCzeJ3.png" alt="Jupyter的部分贡献者"></p><p>-Jupyter的部分贡献者</p><p>Jupyter由网页应用和文档两部分组成，其中每一行代码都可以单独给出结果，适合于进行代码的学习和授课。</p><h2 id="Jupyter的基本操作">Jupyter的基本操作</h2><p>事实上，我们在Jupyter上的很多操作都是利用快捷键完成的。常用的快捷键如下：<img src="https://s2.loli.net/2022/10/02/UOVRv6LDysw2r7K.png" alt="6KB0289IFZ_HXTTIFM5GB_1.png"></p><p>-常用的Jupyter操作快捷键</p><p>我们可以使用os包来查看当前工作的目录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">os.getcwd()</span><br></pre></td></tr></table></figure><p>完整版可以在Jupyter的操作页面的Help–Keyboard Shortcuts中找到。</p><h2 id="如何在Jupyter-Notebook中使用Python虚拟环境">如何在Jupyter Notebook中使用Python虚拟环境</h2><p>Python虚拟环境的出现是因为Python目前有两个版本共存。</p><p>虽然Python 3有许多优于Python 2的特性，但是Python 2的生态系统更为完善，支持的包更多。因为生态系统内部的依赖关系，许多软件包的运行说明会直接指定“仅适用于Python 2.7版本”。</p><p>我们可以很容易的在电脑里建立起多个虚拟环境，利用conda即可完成，但是在这里建立的环境并不适用于Jupyter，为了让Jupyter Notebook支持虚拟运行环境，需要在Anaconda里安装一个插件。</p><p><strong>他的名字叫做：ipykernel</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">conda create --name miaomiao python=<span class="number">3.9</span></span><br><span class="line"><span class="comment">#新建一个喵喵环境，注意这里一定要定好python版本</span></span><br><span class="line"></span><br><span class="line">conda activate miaomiao</span><br><span class="line"><span class="comment">#激活你要的本地环境，例如：miaomiao</span></span><br><span class="line"></span><br><span class="line">conda install ipykernel</span><br><span class="line"><span class="comment">#安装ipykernel</span></span><br><span class="line"></span><br><span class="line">python -m ipykernel install --user --name 本地环境名称 --display-name <span class="string">"在jupyter上显示的环境名称"</span></span><br><span class="line"><span class="comment">#将你刚才激活的环境**注入**到Jupyter</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后我们点开任意文档都可以在kernel中切换成该环境。</p><p>我们可以直接使用anconda进行安装和使用，其中默认的环境是base，我们可以手动更改环境。</p><p>关于更详尽的Jupyter介绍在<a href="https://zhuanlan.zhihu.com/p/33105153">这里</a></p><h1>简单介绍Pandas和Numpy,Matplotlib</h1><ul><li>Numpy是Python语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。最重要的一个特点是其 N 维数组对象ndarray，它是一系列同类型数据的集合，以0下标为开始进行集合中元素的索引。其ndarray与torch有相似之处且可以互相转化，torch被誉为神经网络界的numpy，torch本身利用GPU（图形处理器）进行加速，numpy则是利用CPU（中央处理器）进行加速。</li><li>Pandas也是Python语言的一个扩展程序库，是基于numpy的强大的分析结构化数据的工具集。主要数据结构是Series（一维数据）与DataFrame（二维数据）。</li><li>Matplotlib是Python的绘图库。</li></ul><p>以上拓展库都可以使用pip（推荐）或者conda进行安装。</p><h1>预备知识</h1><h2 id="数据操作">数据操作</h2><p>数据操作的基础：</p><ul><li>获取和存储数据</li><li>处理数据</li></ul><p>我们使用tensor（张量）进行操作，其类似于Numpy中的ndarray，但由于GPU加速计算和一些额外的重要功能使得tensor更适合深度学习。<strong>那么为什么机器学习要使用GPU进行加速呢？GPU和CPU的区别在哪里？</strong><img src="https://s2.loli.net/2022/10/02/lgGN6mHS9AJyvwW.jpg" alt="v2-75cdb098e645c614492746417b457c13_1440w.jpg"></p><ul><li><p>GPU与CPU的区别关于更详尽的介绍在<a href="https://zhuanlan.zhihu.com/p/156171120">这里</a></p></li><li><p>安装深度学习框架和d2l软件包使用pip或conda安装PyTorch的CPU或GPU版本：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install torch</span><br><span class="line">pip install torchvision <span class="comment">#处理图像数据</span></span><br></pre></td></tr></table></figure><p>然后安装d2l包，以方便调取机器学习中常用的函数和类：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install d2l</span><br></pre></td></tr></table></figure><h3 id="入门">入门</h3><p>在此用例子来复习一些tensor的基本用法：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> matplotlib <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">x = torch.arange(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">x.shape</span><br><span class="line"><span class="comment">#output: torch.Size([12])</span></span><br><span class="line"></span><br><span class="line">X = x.reshape(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">X</span><br><span class="line"><span class="comment">#output: tensor([[0,1,2,3],</span></span><br><span class="line">                 [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>],</span><br><span class="line">                 [<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>]])</span><br><span class="line"></span><br><span class="line">torch.zeros((<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"><span class="comment">#这里类似于ndarray</span></span><br><span class="line"></span><br><span class="line">Y = torch.randn(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">Y</span><br><span class="line"></span><br><span class="line">X[-<span class="number">1</span>]  <span class="comment">#最后一个元素</span></span><br><span class="line">X[<span class="number">1</span>:<span class="number">3</span>] <span class="comment">#第二个元素</span></span><br><span class="line">X[<span class="number">1</span>,<span class="number">2</span>] <span class="comment">#第二行第三列的元素</span></span><br><span class="line">X[<span class="number">0</span>:<span class="number">2</span>,:]  <span class="comment">#第一行到第二行，选择全部列。</span></span><br></pre></td></tr></table></figure><p>在此需要注意，在numpy和torch创建列表的区别，两者都可以使用np.zeros()或者torch.zeros()创建空列表，但是np必须加上[],例如</p><p>np.zeros([1,2,3])</p><p>但是np.zeros(1,2,3)就会报错。</p><p>而torch则兼容，建议在日常中使用[]。</p><h3 id="运算符">运算符</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">x = torch.tensor([<span class="number">1.0</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line">y = torch.tensor([<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>])</span><br><span class="line"></span><br><span class="line">x + y, x - y, x * y, x / y, x ** y </span><br><span class="line"><span class="comment"># **运算符是求幂运算，基础运算</span></span><br><span class="line"></span><br><span class="line">torch.exp(x)</span><br><span class="line"><span class="comment">#求幂</span></span><br></pre></td></tr></table></figure><p>除按照元素计算，我们还可以以执行线性代数运算，包括向量点积和矩阵乘法。</p><p>如下介绍张量连接：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">X = torch.arange(<span class="number">12</span>, dtype=torch.float32).reshape((<span class="number">3</span>,<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line">Y = torch.tensor([[<span class="number">2.0</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>], [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>]])</span><br><span class="line"></span><br><span class="line">torch.cat((X, Y), dim=<span class="number">0</span>), torch.cat((X, Y), dim=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line">(tensor([</span><br><span class="line">[ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>],</span><br><span class="line">[ <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>],</span><br><span class="line">[ <span class="number">8.</span>, <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>],</span><br><span class="line">[ <span class="number">2.</span>, <span class="number">1.</span>, <span class="number">4.</span>, <span class="number">3.</span>],</span><br><span class="line">[ <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>],</span><br><span class="line">[ <span class="number">4.</span>, <span class="number">3.</span>, <span class="number">2.</span>, <span class="number">1.</span>]</span><br><span class="line">]),</span><br><span class="line"></span><br><span class="line">tensor([</span><br><span class="line">[ <span class="number">0.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">2.</span>, <span class="number">1.</span>, <span class="number">4.</span>, <span class="number">3.</span>],</span><br><span class="line">[ <span class="number">4.</span>, <span class="number">5.</span>, <span class="number">6.</span>, <span class="number">7.</span>, <span class="number">1.</span>, <span class="number">2.</span>, <span class="number">3.</span>, <span class="number">4.</span>],</span><br><span class="line">[ <span class="number">8.</span>, <span class="number">9.</span>, <span class="number">10.</span>, <span class="number">11.</span>, <span class="number">4.</span>, <span class="number">3.</span>, <span class="number">2.</span>, <span class="number">1.</span>]</span><br><span class="line">]))</span><br></pre></td></tr></table></figure><p>dim=0按照轴0，即行进行连接，dim=1按照轴1，即列连接。</p><p>X.sum()表示求和</p><h3 id="广播机制">广播机制</h3><p>在张量形状不同的情况下，我们仍然可以通过调用广播机制（broadcasting mechanism）来执行按元素操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = torch.arange(<span class="number">3</span>).reshape((<span class="number">3</span>, <span class="number">1</span>))</span><br><span class="line">b = torch.arange(<span class="number">2</span>).reshape((<span class="number">1</span>, <span class="number">2</span>))</span><br><span class="line">a, b</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line">(tensor([[<span class="number">0</span>],</span><br><span class="line">         [<span class="number">1</span>],</span><br><span class="line">         [<span class="number">2</span>]]),</span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>]]))</span><br><span class="line"></span><br><span class="line">a + b</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line">tensor([[<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>],</span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>]])</span><br></pre></td></tr></table></figure><p>需要注意的是，广播机制的扩展是有一定规律的，其详细的广播机制可以在<a href="http://python.micropython.com.cn/numpy08/index.html#:~:text=%E5%B9%BF%E6%92%AD%E6%9C%BA%E5%88%B6%E6%98%AFNumpy%E8%AE%A9%E4%B8%A4%E4%B8%AA%E4%B8%8D%E5%90%8Cshape%E7%9A%84%E6%95%B0%E7%BB%84%E8%83%BD%E5%A4%9F%E5%81%9A%E4%B8%80%E4%BA%9B%E8%BF%90%E7%AE%97%EF%BC%8C%E9%9C%80%E8%A6%81%E5%AF%B9%E5%8F%82%E4%B8%8E%E8%BF%90%E7%AE%97%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E5%81%9A%E4%B8%80%E4%BA%9B%E5%A4%84%E7%90%86%E6%88%96%E8%80%85%E8%AF%B4%E6%89%A9%E5%B1%95%EF%BC%8C%E6%9C%80%E7%BB%88%E6%98%AF%E5%8F%82%E4%B8%8E%E8%BF%90%E7%AE%97%E7%9A%84%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84shape%E4%B8%80%E6%A0%B7%EF%BC%8C%E7%84%B6%E5%90%8E%E5%B9%BF%E6%92%AD%E8%AE%A1%E7%AE%97,%28%E5%AF%B9%E5%BA%94%E4%BD%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E8%BF%9B%E8%A1%8C%E6%9F%90%E8%BF%90%E7%AE%97%29%E5%BE%97%E5%88%B0%E7%BB%93%E6%9E%9C%E3%80%82">这个网站</a>里找到。</p><p>其大致方式为：</p><ol><li>比较两个数组从后往前，维度是否相等或者为1。否则无法广播。</li><li>若为1，则扩展到相同的维度，以此依次进行，直到维度相等。</li></ol><h3 id="索引">索引</h3><p>在前面已经提过</p><h3 id="内存节省">内存节省</h3><p>Y = X + Y</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">before = <span class="built_in">id</span>(kitty)</span><br><span class="line">kitty = kitty + neutered</span><br><span class="line"><span class="built_in">id</span>(kitty) == before</span><br><span class="line"></span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="literal">False</span></span><br><span class="line">小猫被分到了另一个房间，这样就造成房间的不必要分配。</span><br></pre></td></tr></table></figure><p>我们使用切片表示来将操作结果分配给先前数组：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Z = torch.zeros_like(Y)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'id(Z):'</span>,<span class="built_in">id</span>(Z))</span><br><span class="line">Z[:] = X + Y</span><br><span class="line"><span class="built_in">print</span>(<span class="string">'id(Z):'</span>,<span class="built_in">id</span>(Z))</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line">两个Z的地址一样</span><br><span class="line">如果后续不需要使用X，那么我们使用X[:] = X + Y或者X += Y（Python本身的赋值运算符）也同样可以节省内存：</span><br><span class="line">before = <span class="built_in">id</span>(X)</span><br><span class="line">X += Y</span><br><span class="line"><span class="built_in">id</span>(X) == before</span><br><span class="line"><span class="comment">#output:</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h3 id="转换为其他python对象">转换为其他python对象</h3><p>深度学习中，我们使用定义的张量可以转化为Numpy中的ndarray，并且共享同一个内存（部分共享）。会同时被更改：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">A = X.numpy()</span><br><span class="line">B = torch.tensor(A)</span><br><span class="line"></span><br><span class="line"><span class="built_in">type</span>(A),<span class="built_in">type</span>(B),</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line">(numpy.ndarray,torch.tensor)</span><br><span class="line"></span><br><span class="line">a = torch.tensor([<span class="number">3.5</span>])</span><br><span class="line">a, a.item, <span class="built_in">float</span>(a), <span class="built_in">int</span>(a)</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line">(tensor([<span class="number">3.5000</span>], <span class="number">3.5</span>, <span class="number">3.5</span>, <span class="number">3</span>))</span><br></pre></td></tr></table></figure><p>其实我们也可以从numpy中创建tensor,利用torch.from_numpy进行创建：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">ndarray1 = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">tensor1 = torch.from_numpy(ndarray1)</span><br><span class="line"></span><br><span class="line">ndarray1</span><br><span class="line"></span><br><span class="line">tensor1</span><br><span class="line"><span class="comment">#outputs:</span></span><br><span class="line">array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],</span><br><span class="line">       [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]])</span><br><span class="line"></span><br><span class="line">tensor([[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>],</span><br><span class="line">        [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>]], dtype=torch.int32)</span><br></pre></td></tr></table></figure><h2 id="数据预处理">数据预处理</h2><p>我们使用pandas包（与tensor兼容）进行数据的原始预处理：</p><h3 id="读取数据集">读取数据集</h3><p>我们利用os包进行操作：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">os.getcwd()<span class="comment">#查看当前工作目录</span></span><br><span class="line"></span><br><span class="line">os.makedirs(os.path.join(<span class="string">'..'</span>,<span class="string">'data'</span>),exist_ok = <span class="literal">True</span>)</span><br><span class="line">my_file = os.path.join(<span class="string">'..'</span>,<span class="string">'data'</span>,<span class="string">'houses.csv'</span>)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(my_file,<span class="string">'w'</span>) <span class="keyword">as</span> f:<span class="comment">#'w'和'wb'表示写入文本文件或者二进制文件</span></span><br><span class="line">      f.write(<span class="string">'NumRooms,Alley,Price\n'</span>) <span class="comment"># 列名</span></span><br><span class="line">      f.write(<span class="string">'NA,Pave,127500\n'</span>) </span><br><span class="line">      f.write(<span class="string">'2,NA,106000\n'</span>)</span><br><span class="line">      f.write(<span class="string">'4,NA,178100\n'</span>)</span><br><span class="line">      f.write(<span class="string">'NA,NA,140000\n'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">data = pd.read_csv(my_file)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><h3 id="处理缺失值">处理缺失值</h3><p>我们在此考虑插值法处理缺失值。通过位置索引iloc，我们将data分成inputs和outputs，其中前者为data的前两列，⽽后者为data的最后一列。对于inputs中缺少的数值，我们用同一列的均值替换“NaN”项。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">inputs, outputs = data.iloc[:, 0:2], data.iloc[:, 2]</span><br><span class="line">inputs = inputs.fillna(inputs.mean())</span><br><span class="line">print(inputs)</span><br></pre></td></tr></table></figure><p>结果如下：</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">NumRooms</th><th style="text-align:center">Alley</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">3.0</td><td style="text-align:center">Pave</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2.0</td><td style="text-align:center">NaN</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">4.0</td><td style="text-align:center">NaN</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">3.0</td><td style="text-align:center">NaN</td></tr></tbody></table><p>由于“巷子类型”（“Alley”）列只有两种类型的类别值“Pave”和“NaN”，pandas自动将此列转换为两列“Alley_Pave”和“Alley_nan”。</p><p>巷子类型为“Pave”的行会将“Alley_Pave”的值设置为1，“Alley_nan”的值设置为0。</p><p>缺少巷子类型的行会将“Alley_Pave”和“Alley_nan”分别设置为0和1。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">inputs = pd.get_dummies(inputs, dummy_na=True)</span><br><span class="line">print(inputs)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">NumRooms</th><th style="text-align:center">Alley_Pave</th><th style="text-align:center">Alley_nan</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">3.0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">2.0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">4.0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">3.0</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何成为数据科学家？</title>
      <link href="/2022/10/04/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AE%B6%EF%BC%9F/"/>
      <url>/2022/10/04/%E5%A6%82%E4%BD%95%E6%88%90%E4%B8%BA%E6%95%B0%E6%8D%AE%E7%A7%91%E5%AD%A6%E5%AE%B6%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>数据科学家，要比软件工程师更擅长统计学，比统计学家更擅长软件工程。</p><span id="more"></span><h1>1.学好统计，数学和机器学习</h1><p>推荐书：《赤裸裸的统计学》，《深入浅出统计学》，《数据分析思维》</p><h1>2.学好编程</h1><p>学会使用数据分析的编程语言，如R，Python，SAS，SPSS。</p><h1>3.理解数据库</h1><p>学会使用关系数据库MySQL，非关系型数据库MongoDB.</p><h1>4.学会数据预处理，数据可视化和报表</h1><p>数据报表可以1使用Power BI，Tableau等。</p><h1>5.提升到大数据级别</h1><p>使用分布式处理大数据集，所用软件为Hadoop，Apache Spark等。</p><h1>6.通过实战进行加深巩固</h1><h1>7.在社区和大牛，新手交流</h1>]]></content>
      
      
      <categories>
          
          <category> 日记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析需要掌握什么？</title>
      <link href="/2022/10/04/%E5%85%B3%E4%BA%8E%E7%8B%97%E7%86%8A%E4%BC%9A/"/>
      <url>/2022/10/04/%E5%85%B3%E4%BA%8E%E7%8B%97%E7%86%8A%E4%BC%9A/</url>
      
        <content type="html"><![CDATA[<h2 id="数据分析是什么">数据分析是什么</h2><p>数据分析是一个拥有巨大潜力的岗位，其旨在对海量的数据进行清洗，建模，分析和得出建设性的意见。数据分析不仅在于其应用广泛，更因为其与大数据时代相连。我相信随着元宇宙的普及，比大数据还要大的数据时代即将到来，或许到时数据分析和统计学会拥有更大的舞台。但无论怎样，基础知识在这个时代仍然不过时，不论形式怎么变化，坚实的内核基础永远需要熟知。</p><span id="more"></span><h2 id="怎么了解数据分析">怎么了解数据分析</h2><h3 id="你需要学习什么">你需要学习什么</h3><p>R，MySQL，Python(部分岗位要求R与Python至少熟知一种)，Excel，机器学习</p><h3 id="你可以学习什么">你可以学习什么</h3><p>Git:方便让你使用Github来与其他程序猿交流Hexo:搭建个人博客Markdown:一个简单方便的轻量级标记语言，允许人们使用易读易写的纯文本格式编写文档。</p><h3 id="你该如何学习">你该如何学习</h3><p><strong>廖雪峰的个人博客</strong>：廖雪峰是我入门Git和MySQL的启蒙导师，在他的个人博客中包含了Python，Git，MySQL，Java甚至到区块链的细致教学。他的博客链接在<a href="https://www.liaoxuefeng.com/">这里</a>,你可以在这里入门Python和MySQL。并顺带学习Git。<strong>狗熊会</strong>：狗熊会是我大学期间接触的一个统计学组织，现在在网络上的百度百科似乎查不到‘狗熊会’的百度百科，但是在我大三在仙桃数据谷实习期间，以及在大四下学期的自学阶段，‘狗熊会’的公众号文章一直是我提升自己的手段。曾在狗熊会广泛阅读R语言入门、回归分析、Python、机器学习、深度学习等等文章。我建议你的R可以从这里开始。当你的Python和R基础足够之后，可以通过其公众号的精品课程(Free)来将其应用到真实的数据分析案例中。</p><h3 id="我不建议的学习方式">我不建议的学习方式</h3><p><strong>BiliBili</strong>：虽然是互联网的宠儿，被称为BiliBili大学。但由于其弹幕文化的水平和急于求成的用户学习环境，对于真正想要沉淀知识的人，我不建议在这个网站上学习你想要的语言。</p>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 狗熊会 </tag>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/10/03/hello-world/"/>
      <url>/2022/10/03/hello-world/</url>
      
        <content type="html"><![CDATA[<p>建立一个个人博客的过程是艰难的，从一无所知到会简单搭建自己的网站，大约花费了我一周的时间。但是这段时间是我为数不多的从事自己喜欢的事情并投入其中的宝贵财富。我的旅程从现在才刚刚开始</p><span id="more"></span><h2 id="我的好朋友们">我的好朋友们</h2><h3 id="我的伴侣">我的伴侣</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">金牌女友：王子涵女士</span><br></pre></td></tr></table></figure><!-- 王子涵语录 --><blockquote><p>明天再说吧-王子涵</p></blockquote><p>这里有她的一张<a href="https://sm.ms/image/Z7aguFqHSbYPdc6">照片</a></p><h3 id="我的好哥们">我的好哥们</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">可靠的伙伴：杜林先生</span><br></pre></td></tr></table></figure><blockquote><p>来，兄弟发把狙-杜林</p></blockquote><p>这里有他的一张<a href="https://sm.ms/image/otTIDFNy2r8d9Re">照片</a>注：右一是杜林先生，左一是西南大学数学与统计学院的统计系系主任彭作祥教授</p><h3 id="我的亲人">我的亲人</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">亲爱的妹妹：丁芊佑女士</span><br></pre></td></tr></table></figure><blockquote><p>呀呀呀呀啊呀-丁芊佑</p></blockquote><p>这里有她的一张<a href="https://sm.ms/image/GTljHacZBDwRuJI">照片</a></p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 个人 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
